var sandwich = (function (exports) {
  'use strict';

  function initDisplay(divID) {
    // Input is the ID of an HTML <div> where everything will be displayed

    // Get the div itself
    var displayDiv = document.getElementById(divID);

    // Add the main canvas, which fills the whole display div
    var canvas = addChild( displayDiv, 'canvas', 'display-canvas');
    // Initialize the main rendering context
    var context = canvas.getContext("2d");

    // Set size of drawingbuffer
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;

    return {
      element: displayDiv,
      canvas,
      context,
    };
  }

  function addChild(parentElement, childType, cssClass) {
    var child = document.createElement(childType);
    child.classList.add(cssClass);
    parentElement.appendChild(child);
    return child;
  }

  var read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  };

  var write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = ((value * c) - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };

  function Pbf(buf) {
      this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
      this.pos = 0;
      this.type = 0;
      this.length = this.buf.length;
  }

  Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
  Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
  Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
  Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

  var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
      SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

  Pbf.prototype = {

      destroy: function() {
          this.buf = null;
      },

      // === READING =================================================================

      readFields: function(readField, result, end) {
          end = end || this.length;

          while (this.pos < end) {
              var val = this.readVarint(),
                  tag = val >> 3,
                  startPos = this.pos;

              this.type = val & 0x7;
              readField(tag, result, this);

              if (this.pos === startPos) this.skip(val);
          }
          return result;
      },

      readMessage: function(readField, result) {
          return this.readFields(readField, result, this.readVarint() + this.pos);
      },

      readFixed32: function() {
          var val = readUInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      readSFixed32: function() {
          var val = readInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

      readFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readSFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readFloat: function() {
          var val = read(this.buf, this.pos, true, 23, 4);
          this.pos += 4;
          return val;
      },

      readDouble: function() {
          var val = read(this.buf, this.pos, true, 52, 8);
          this.pos += 8;
          return val;
      },

      readVarint: function(isSigned) {
          var buf = this.buf,
              val, b;

          b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
          b = buf[this.pos];   val |= (b & 0x0f) << 28;

          return readVarintRemainder(val, isSigned, this);
      },

      readVarint64: function() { // for compatibility with v2.0.1
          return this.readVarint(true);
      },

      readSVarint: function() {
          var num = this.readVarint();
          return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
      },

      readBoolean: function() {
          return Boolean(this.readVarint());
      },

      readString: function() {
          var end = this.readVarint() + this.pos,
              str = readUtf8(this.buf, this.pos, end);
          this.pos = end;
          return str;
      },

      readBytes: function() {
          var end = this.readVarint() + this.pos,
              buffer = this.buf.subarray(this.pos, end);
          this.pos = end;
          return buffer;
      },

      // verbose for performance reasons; doesn't affect gzipped size

      readPackedVarint: function(arr, isSigned) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readVarint(isSigned));
          return arr;
      },
      readPackedSVarint: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSVarint());
          return arr;
      },
      readPackedBoolean: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readBoolean());
          return arr;
      },
      readPackedFloat: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFloat());
          return arr;
      },
      readPackedDouble: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readDouble());
          return arr;
      },
      readPackedFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed32());
          return arr;
      },
      readPackedSFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed32());
          return arr;
      },
      readPackedFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed64());
          return arr;
      },
      readPackedSFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed64());
          return arr;
      },

      skip: function(val) {
          var type = val & 0x7;
          if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
          else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
          else if (type === Pbf.Fixed32) this.pos += 4;
          else if (type === Pbf.Fixed64) this.pos += 8;
          else throw new Error('Unimplemented type: ' + type);
      },

      // === WRITING =================================================================

      writeTag: function(tag, type) {
          this.writeVarint((tag << 3) | type);
      },

      realloc: function(min) {
          var length = this.length || 16;

          while (length < this.pos + min) length *= 2;

          if (length !== this.length) {
              var buf = new Uint8Array(length);
              buf.set(this.buf);
              this.buf = buf;
              this.length = length;
          }
      },

      finish: function() {
          this.length = this.pos;
          this.pos = 0;
          return this.buf.subarray(0, this.length);
      },

      writeFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeSFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeSFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeVarint: function(val) {
          val = +val || 0;

          if (val > 0xfffffff || val < 0) {
              writeBigVarint(val, this);
              return;
          }

          this.realloc(4);

          this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] =   (val >>> 7) & 0x7f;
      },

      writeSVarint: function(val) {
          this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
      },

      writeBoolean: function(val) {
          this.writeVarint(Boolean(val));
      },

      writeString: function(str) {
          str = String(str);
          this.realloc(str.length * 4);

          this.pos++; // reserve 1 byte for short string length

          var startPos = this.pos;
          // write the string directly to the buffer and see how much was written
          this.pos = writeUtf8(this.buf, str, this.pos);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeFloat: function(val) {
          this.realloc(4);
          write(this.buf, val, this.pos, true, 23, 4);
          this.pos += 4;
      },

      writeDouble: function(val) {
          this.realloc(8);
          write(this.buf, val, this.pos, true, 52, 8);
          this.pos += 8;
      },

      writeBytes: function(buffer) {
          var len = buffer.length;
          this.writeVarint(len);
          this.realloc(len);
          for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
      },

      writeRawMessage: function(fn, obj) {
          this.pos++; // reserve 1 byte for short message length

          // write the message directly to the buffer and see how much was written
          var startPos = this.pos;
          fn(obj, this);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeMessage: function(tag, fn, obj) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeRawMessage(fn, obj);
      },

      writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },
      writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },
      writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },
      writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },
      writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },
      writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },
      writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },
      writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },
      writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },

      writeBytesField: function(tag, buffer) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeBytes(buffer);
      },
      writeFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFixed32(val);
      },
      writeSFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeSFixed32(val);
      },
      writeFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeFixed64(val);
      },
      writeSFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeSFixed64(val);
      },
      writeVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeVarint(val);
      },
      writeSVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeSVarint(val);
      },
      writeStringField: function(tag, str) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeString(str);
      },
      writeFloatField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFloat(val);
      },
      writeDoubleField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeDouble(val);
      },
      writeBooleanField: function(tag, val) {
          this.writeVarintField(tag, Boolean(val));
      }
  };

  function readVarintRemainder(l, s, p) {
      var buf = p.buf,
          h, b;

      b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

      throw new Error('Expected varint not more than 10 bytes');
  }

  function readPackedEnd(pbf) {
      return pbf.type === Pbf.Bytes ?
          pbf.readVarint() + pbf.pos : pbf.pos + 1;
  }

  function toNum(low, high, isSigned) {
      if (isSigned) {
          return high * 0x100000000 + (low >>> 0);
      }

      return ((high >>> 0) * 0x100000000) + (low >>> 0);
  }

  function writeBigVarint(val, pbf) {
      var low, high;

      if (val >= 0) {
          low  = (val % 0x100000000) | 0;
          high = (val / 0x100000000) | 0;
      } else {
          low  = ~(-val % 0x100000000);
          high = ~(-val / 0x100000000);

          if (low ^ 0xffffffff) {
              low = (low + 1) | 0;
          } else {
              low = 0;
              high = (high + 1) | 0;
          }
      }

      if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
          throw new Error('Given varint doesn\'t fit into 10 bytes');
      }

      pbf.realloc(10);

      writeBigVarintLow(low, high, pbf);
      writeBigVarintHigh(high, pbf);
  }

  function writeBigVarintLow(low, high, pbf) {
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos]   = low & 0x7f;
  }

  function writeBigVarintHigh(high, pbf) {
      var lsb = (high & 0x07) << 4;

      pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f;
  }

  function makeRoomForExtraLength(startPos, len, pbf) {
      var extraLen =
          len <= 0x3fff ? 1 :
          len <= 0x1fffff ? 2 :
          len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));

      // if 1 byte isn't enough for encoding message length, shift the data to the right
      pbf.realloc(extraLen);
      for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
  }

  function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
  function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
  function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
  function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
  function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
  function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
  function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
  function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
  function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

  // Buffer code below from https://github.com/feross/buffer, MIT-licensed

  function readUInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] * 0x1000000);
  }

  function writeInt32(buf, val, pos) {
      buf[pos] = val;
      buf[pos + 1] = (val >>> 8);
      buf[pos + 2] = (val >>> 16);
      buf[pos + 3] = (val >>> 24);
  }

  function readInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] << 24);
  }

  function readUtf8(buf, pos, end) {
      var str = '';
      var i = pos;

      while (i < end) {
          var b0 = buf[i];
          var c = null; // codepoint
          var bytesPerSequence =
              b0 > 0xEF ? 4 :
              b0 > 0xDF ? 3 :
              b0 > 0xBF ? 2 : 1;

          if (i + bytesPerSequence > end) break;

          var b1, b2, b3;

          if (bytesPerSequence === 1) {
              if (b0 < 0x80) {
                  c = b0;
              }
          } else if (bytesPerSequence === 2) {
              b1 = buf[i + 1];
              if ((b1 & 0xC0) === 0x80) {
                  c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                  if (c <= 0x7F) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 3) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                  if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 4) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              b3 = buf[i + 3];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                  if (c <= 0xFFFF || c >= 0x110000) {
                      c = null;
                  }
              }
          }

          if (c === null) {
              c = 0xFFFD;
              bytesPerSequence = 1;

          } else if (c > 0xFFFF) {
              c -= 0x10000;
              str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
              c = 0xDC00 | c & 0x3FF;
          }

          str += String.fromCharCode(c);
          i += bytesPerSequence;
      }

      return str;
  }

  function writeUtf8(buf, str, pos) {
      for (var i = 0, c, lead; i < str.length; i++) {
          c = str.charCodeAt(i); // code point

          if (c > 0xD7FF && c < 0xE000) {
              if (lead) {
                  if (c < 0xDC00) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                      lead = c;
                      continue;
                  } else {
                      c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                      lead = null;
                  }
              } else {
                  if (c > 0xDBFF || (i + 1 === str.length)) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                  } else {
                      lead = c;
                  }
                  continue;
              }
          } else if (lead) {
              buf[pos++] = 0xEF;
              buf[pos++] = 0xBF;
              buf[pos++] = 0xBD;
              lead = null;
          }

          if (c < 0x80) {
              buf[pos++] = c;
          } else {
              if (c < 0x800) {
                  buf[pos++] = c >> 0x6 | 0xC0;
              } else {
                  if (c < 0x10000) {
                      buf[pos++] = c >> 0xC | 0xE0;
                  } else {
                      buf[pos++] = c >> 0x12 | 0xF0;
                      buf[pos++] = c >> 0xC & 0x3F | 0x80;
                  }
                  buf[pos++] = c >> 0x6 & 0x3F | 0x80;
              }
              buf[pos++] = c & 0x3F | 0x80;
          }
      }
      return pos;
  }

  /**
   * A standalone point geometry with useful accessor, comparison, and
   * modification methods.
   *
   * @class Point
   * @param {Number} x the x-coordinate. this could be longitude or screen
   * pixels, or any other sort of unit.
   * @param {Number} y the y-coordinate. this could be latitude or screen
   * pixels, or any other sort of unit.
   * @example
   * var point = new Point(-77, 38);
   */
  function Point(x, y) {
      this.x = x;
      this.y = y;
  }

  Point.prototype = {

      /**
       * Clone this point, returning a new point that can be modified
       * without affecting the old one.
       * @return {Point} the clone
       */
      clone: function() { return new Point(this.x, this.y); },

      /**
       * Add this point's x & y coordinates to another point,
       * yielding a new point.
       * @param {Point} p the other point
       * @return {Point} output point
       */
      add:     function(p) { return this.clone()._add(p); },

      /**
       * Subtract this point's x & y coordinates to from point,
       * yielding a new point.
       * @param {Point} p the other point
       * @return {Point} output point
       */
      sub:     function(p) { return this.clone()._sub(p); },

      /**
       * Multiply this point's x & y coordinates by point,
       * yielding a new point.
       * @param {Point} p the other point
       * @return {Point} output point
       */
      multByPoint:    function(p) { return this.clone()._multByPoint(p); },

      /**
       * Divide this point's x & y coordinates by point,
       * yielding a new point.
       * @param {Point} p the other point
       * @return {Point} output point
       */
      divByPoint:     function(p) { return this.clone()._divByPoint(p); },

      /**
       * Multiply this point's x & y coordinates by a factor,
       * yielding a new point.
       * @param {Point} k factor
       * @return {Point} output point
       */
      mult:    function(k) { return this.clone()._mult(k); },

      /**
       * Divide this point's x & y coordinates by a factor,
       * yielding a new point.
       * @param {Point} k factor
       * @return {Point} output point
       */
      div:     function(k) { return this.clone()._div(k); },

      /**
       * Rotate this point around the 0, 0 origin by an angle a,
       * given in radians
       * @param {Number} a angle to rotate around, in radians
       * @return {Point} output point
       */
      rotate:  function(a) { return this.clone()._rotate(a); },

      /**
       * Rotate this point around p point by an angle a,
       * given in radians
       * @param {Number} a angle to rotate around, in radians
       * @param {Point} p Point to rotate around
       * @return {Point} output point
       */
      rotateAround:  function(a,p) { return this.clone()._rotateAround(a,p); },

      /**
       * Multiply this point by a 4x1 transformation matrix
       * @param {Array<Number>} m transformation matrix
       * @return {Point} output point
       */
      matMult: function(m) { return this.clone()._matMult(m); },

      /**
       * Calculate this point but as a unit vector from 0, 0, meaning
       * that the distance from the resulting point to the 0, 0
       * coordinate will be equal to 1 and the angle from the resulting
       * point to the 0, 0 coordinate will be the same as before.
       * @return {Point} unit vector point
       */
      unit:    function() { return this.clone()._unit(); },

      /**
       * Compute a perpendicular point, where the new y coordinate
       * is the old x coordinate and the new x coordinate is the old y
       * coordinate multiplied by -1
       * @return {Point} perpendicular point
       */
      perp:    function() { return this.clone()._perp(); },

      /**
       * Return a version of this point with the x & y coordinates
       * rounded to integers.
       * @return {Point} rounded point
       */
      round:   function() { return this.clone()._round(); },

      /**
       * Return the magitude of this point: this is the Euclidean
       * distance from the 0, 0 coordinate to this point's x and y
       * coordinates.
       * @return {Number} magnitude
       */
      mag: function() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
      },

      /**
       * Judge whether this point is equal to another point, returning
       * true or false.
       * @param {Point} other the other point
       * @return {boolean} whether the points are equal
       */
      equals: function(other) {
          return this.x === other.x &&
                 this.y === other.y;
      },

      /**
       * Calculate the distance from this point to another point
       * @param {Point} p the other point
       * @return {Number} distance
       */
      dist: function(p) {
          return Math.sqrt(this.distSqr(p));
      },

      /**
       * Calculate the distance from this point to another point,
       * without the square root step. Useful if you're comparing
       * relative distances.
       * @param {Point} p the other point
       * @return {Number} distance
       */
      distSqr: function(p) {
          var dx = p.x - this.x,
              dy = p.y - this.y;
          return dx * dx + dy * dy;
      },

      /**
       * Get the angle from the 0, 0 coordinate to this point, in radians
       * coordinates.
       * @return {Number} angle
       */
      angle: function() {
          return Math.atan2(this.y, this.x);
      },

      /**
       * Get the angle from this point to another point, in radians
       * @param {Point} b the other point
       * @return {Number} angle
       */
      angleTo: function(b) {
          return Math.atan2(this.y - b.y, this.x - b.x);
      },

      /**
       * Get the angle between this point and another point, in radians
       * @param {Point} b the other point
       * @return {Number} angle
       */
      angleWith: function(b) {
          return this.angleWithSep(b.x, b.y);
      },

      /*
       * Find the angle of the two vectors, solving the formula for
       * the cross product a x b = |a||b|sin(θ) for θ.
       * @param {Number} x the x-coordinate
       * @param {Number} y the y-coordinate
       * @return {Number} the angle in radians
       */
      angleWithSep: function(x, y) {
          return Math.atan2(
              this.x * y - this.y * x,
              this.x * x + this.y * y);
      },

      _matMult: function(m) {
          var x = m[0] * this.x + m[1] * this.y,
              y = m[2] * this.x + m[3] * this.y;
          this.x = x;
          this.y = y;
          return this;
      },

      _add: function(p) {
          this.x += p.x;
          this.y += p.y;
          return this;
      },

      _sub: function(p) {
          this.x -= p.x;
          this.y -= p.y;
          return this;
      },

      _mult: function(k) {
          this.x *= k;
          this.y *= k;
          return this;
      },

      _div: function(k) {
          this.x /= k;
          this.y /= k;
          return this;
      },

      _multByPoint: function(p) {
          this.x *= p.x;
          this.y *= p.y;
          return this;
      },

      _divByPoint: function(p) {
          this.x /= p.x;
          this.y /= p.y;
          return this;
      },

      _unit: function() {
          this._div(this.mag());
          return this;
      },

      _perp: function() {
          var y = this.y;
          this.y = this.x;
          this.x = -y;
          return this;
      },

      _rotate: function(angle) {
          var cos = Math.cos(angle),
              sin = Math.sin(angle),
              x = cos * this.x - sin * this.y,
              y = sin * this.x + cos * this.y;
          this.x = x;
          this.y = y;
          return this;
      },

      _rotateAround: function(angle, p) {
          var cos = Math.cos(angle),
              sin = Math.sin(angle),
              x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y),
              y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);
          this.x = x;
          this.y = y;
          return this;
      },

      _round: function() {
          this.x = Math.round(this.x);
          this.y = Math.round(this.y);
          return this;
      }
  };

  /**
   * Construct a point from an array if necessary, otherwise if the input
   * is already a Point, or an unknown type, return it unchanged
   * @param {Array<Number>|Point|*} a any kind of input value
   * @return {Point} constructed point, or passed-through value.
   * @example
   * // this
   * var point = Point.convert([0, 1]);
   * // is equivalent to
   * var point = new Point(0, 1);
   */
  Point.convert = function (a) {
      if (a instanceof Point) {
          return a;
      }
      if (Array.isArray(a)) {
          return new Point(a[0], a[1]);
      }
      return a;
  };

  function VectorTileFeature(pbf, end, extent, keys, values) {
    // Public
    this.properties = {};
    this.extent = extent;
    this.type = 0;

    // Private
    this._pbf = pbf;
    this._geometry = -1;
    this._keys = keys;
    this._values = values;

    pbf.readFields(readFeature, this, end);
  }

  function readFeature(tag, feature, pbf) {
    if (tag == 1) feature.id = pbf.readVarint();
    else if (tag == 2) readTag(pbf, feature);
    else if (tag == 3) feature.type = pbf.readVarint();
    else if (tag == 4) feature._geometry = pbf.pos;
  }

  function readTag(pbf, feature) {
    var end = pbf.readVarint() + pbf.pos;

    while (pbf.pos < end) {
      var key = feature._keys[pbf.readVarint()],
        value = feature._values[pbf.readVarint()];
      feature.properties[key] = value;
    }
  }

  VectorTileFeature.types = ['Unknown', 'Point', 'LineString', 'Polygon'];

  VectorTileFeature.prototype.loadGeometry = function() {
    var pbf = this._pbf;
    pbf.pos = this._geometry;

    var end = pbf.readVarint() + pbf.pos,
    cmd = 1,
    length = 0,
    x = 0,
    y = 0,
    lines = [],
    line;

    while (pbf.pos < end) {
      if (length <= 0) {
        var cmdLen = pbf.readVarint();
        cmd = cmdLen & 0x7;
        length = cmdLen >> 3;
      }

      length--;

      if (cmd === 1 || cmd === 2) {
        x += pbf.readSVarint();
        y += pbf.readSVarint();

        if (cmd === 1) { // moveTo
          if (line) lines.push(line);
          line = [];
        }

        line.push(new Point(x, y));

      } else if (cmd === 7) {

        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90
        if (line) {
          line.push(line[0].clone()); // closePolygon
        }

      } else {
        throw new Error('unknown command ' + cmd);
      }
    }

    if (line) lines.push(line);

    return lines;
  };

  VectorTileFeature.prototype.bbox = function() {
    var pbf = this._pbf;
    pbf.pos = this._geometry;

    var end = pbf.readVarint() + pbf.pos,
    cmd = 1,
    length = 0,
    x = 0,
    y = 0,
    x1 = Infinity,
    x2 = -Infinity,
    y1 = Infinity,
    y2 = -Infinity;

    while (pbf.pos < end) {
      if (length <= 0) {
        var cmdLen = pbf.readVarint();
        cmd = cmdLen & 0x7;
        length = cmdLen >> 3;
      }

      length--;

      if (cmd === 1 || cmd === 2) {
        x += pbf.readSVarint();
        y += pbf.readSVarint();
        if (x < x1) x1 = x;
        if (x > x2) x2 = x;
        if (y < y1) y1 = y;
        if (y > y2) y2 = y;

      } else if (cmd !== 7) {
        throw new Error('unknown command ' + cmd);
      }
    }

    return [x1, y1, x2, y2];
  };

  VectorTileFeature.prototype.toGeoJSON = function(size, sx = 0, sy = 0) {
    // Input size is the side length of the (square) area over which the
    //  coordinate space of this tile [0, this.extent] will be rendered
    // Input sx, sy is the origin (top left corner) of the output coordinates
    //  within the (size x size) rendered area of the full tile. This is
    //  analogous to the sx, sy parameters in the HTML Canvas2D drawImage method,
    //  where we are treating this tile as a source image of width, height = size.
    // NOTE that this vector tile may contain "buffer" points outside the area
    //  (this.extent x this.extent), which will also fall outside (size x size)
    //  These points should be ignored, i.e, ensure 0 < sx,sy < size , and
    //  discard points with output coordinates outside [0, size]

    var scale = size / this.extent,
    coords = this.loadGeometry(),
    type = VectorTileFeature.types[this.type],
    i, j;

    function project(line) {
      for (var j = 0; j < line.length; j++) {
        var p = line[j];
        line[j] = [
          p.x * scale - sx,
          p.y * scale - sy,
        ];
      }
    }

    switch (this.type) {
      case 1:
        var points = [];
        for (i = 0; i < coords.length; i++) {
          points[i] = coords[i][0];
        }
        coords = points;
        project(coords);
        break;

      case 2:
        for (i = 0; i < coords.length; i++) {
          project(coords[i]);
        }
        break;

      case 3:
        coords = classifyRings(coords);
        for (i = 0; i < coords.length; i++) {
          for (j = 0; j < coords[i].length; j++) {
            project(coords[i][j]);
          }
        }
        break;
    }

    if (coords.length === 1) {
      coords = coords[0];
    } else {
      type = 'Multi' + type;
    }

    var result = {
      type: "Feature",
      geometry: {
        type: type,
        coordinates: coords
      },
      properties: this.properties
    };

    if ('id' in this) {
      result.id = this.id;
    }

    return result;
  };

  // classifies an array of rings into polygons with outer rings and holes

  function classifyRings(rings) {
    var len = rings.length;

    if (len <= 1) return [rings];

    var polygons = [],
    polygon,
    ccw;

    for (var i = 0; i < len; i++) {
      var area = signedArea(rings[i]);
      if (area === 0) continue;

      if (ccw === undefined) ccw = area < 0;

      if (ccw === area < 0) {
        if (polygon) polygons.push(polygon);
        polygon = [rings[i]];

      } else {
        polygon.push(rings[i]);
      }
    }
    if (polygon) polygons.push(polygon);

    return polygons;
  }

  function signedArea(ring) {
    var sum = 0;
    for (var i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {
      p1 = ring[i];
      p2 = ring[j];
      sum += (p2.x - p1.x) * (p1.y + p2.y);
    }
    return sum;
  }

  function VectorTileLayer(pbf, end) {
    // Public
    this.version = 1;
    this.name = null;
    this.extent = 4096;
    this.length = 0;

    // Private
    this._pbf = pbf;
    this._keys = [];
    this._values = [];
    this._features = [];

    pbf.readFields(readLayer, this, end);

    this.length = this._features.length;
  }

  function readLayer(tag, layer, pbf) {
    if (tag === 15) layer.version = pbf.readVarint();
    else if (tag === 1) layer.name = pbf.readString();
    else if (tag === 5) layer.extent = pbf.readVarint();
    else if (tag === 2) layer._features.push(pbf.pos);
    else if (tag === 3) layer._keys.push(pbf.readString());
    else if (tag === 4) layer._values.push(readValueMessage(pbf));
  }

  function readValueMessage(pbf) {
    var value = null,
    end = pbf.readVarint() + pbf.pos;

    while (pbf.pos < end) {
      var tag = pbf.readVarint() >> 3;

      value = tag === 1 ? pbf.readString() :
        tag === 2 ? pbf.readFloat() :
        tag === 3 ? pbf.readDouble() :
        tag === 4 ? pbf.readVarint64() :
        tag === 5 ? pbf.readVarint() :
        tag === 6 ? pbf.readSVarint() :
        tag === 7 ? pbf.readBoolean() : null;
    }

    return value;
  }

  // return feature `i` from this layer as a `VectorTileFeature`
  VectorTileLayer.prototype.feature = function(i) {
    if (i < 0 || i >= this._features.length) throw new Error('feature index out of bounds');

    this._pbf.pos = this._features[i];

    var end = this._pbf.readVarint() + this._pbf.pos;
    return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);
  };

  function VectorTile(pbf, end) {
    this.layers = pbf.readFields(readTile, {}, end);
  }

  function readTile(tag, layers, pbf) {
    if (tag === 3) {
      var layer = new VectorTileLayer(pbf, pbf.readVarint() + pbf.pos);
      if (layer.length) layers[layer.name] = layer;
    }
  }

  function readMVT(dataHref, size, callback) {
    // Input dataHref is the path to a file containing a Mapbox Vector Tile

    // Request the data
    xhrGet(dataHref, "arraybuffer", parseMVT);

    function parseMVT(err) {
      if (this.responseType !== "arraybuffer") {
        var err = "Wrong responseType. Expected arraybuffer, got " + 
          this.responseType;
        return callback(err, null);
      }
      if (this.status === 404) {
        // TODO: is there a better way to handle this?
        console.log("ERROR in readMVT: could not load " + dataHref);
        return callback(null, {});
      }

      //console.time('parseMVT');
      const pbuffer = new Pbf( new Uint8Array(this.response) );
      const tile = new VectorTile(pbuffer);
      const jsonLayers = mvtToJSON(tile, size);
      //console.timeEnd('parseMVT');

      callback(null, jsonLayers);
    }
  }

  function mvtToJSON(tile, size) {
    // tile.layers is an object (not array!). In Mapbox Streets, it is an
    // object of { name: layer, } pairs, where name = layer.name. 
    // But this is not mentioned in the spec! So we use layer.name for safety
    const jsonLayers = {};
    Object.values(tile.layers).forEach(layer => {
        jsonLayers[layer.name] = layerToJSON(layer, size);
    });
    return jsonLayers;
  }

  function layerToJSON(layer, size) {
    const features = [];
    for (let i = 0; i < layer.length; ++i) {
      features.push( layer.feature(i).toGeoJSON(size) );
    }
    return { type: "FeatureCollection", features: features };
  }

  function readJSON(dataHref, callback) {
    // Input dataHref is the path to a file containing JSON

    // Request the data - as text, since Edge doesn't support json responseType
    xhrGet(dataHref, "text", parseJSON);

    function parseJSON(err) {
      callback( null, JSON.parse(this.responseText), dataHref );
    }
  }

  function xhrGet(href, type, callback) {
    var req = new XMLHttpRequest();
    req.onerror = reqError;
    req.open('get', href);
    req.responseType = type;
    req.onload = callback;
    req.send();

    function reqError(err) {
      // Not sure how to pass this to the callback? Need 2 callbacks?
      console.log("XMLHttpRequest Error: " + err);
    }
    return req;
  }

  function loadImage(href, callback) {
    const img = new Image();
    img.onerror = () => callback("ERROR in loadImage for href " + href);
    img.onload = checkImg;
    img.crossOrigin = "anonymous";
    img.src = href;

    function checkImg() {
      if (img.complete && img.naturalWidth !== 0) {
        return callback(null, img);
      } else {
        return callback("ERROR in loadImage for href " + href);
      }
    }

    return img;
  }

  // From mapbox-gl-js, style-spec/deref.js
  const refProperties = [
    'type', 
    'source', 
    'source-layer', 
    'minzoom', 
    'maxzoom', 
    'filter', 
    'layout'
  ];

  /**
   * Given an array of layers, some of which may contain `ref` properties
   * whose value is the `id` of another property, return a new array where
   * such layers have been augmented with the 'type', 'source', etc. properties
   * from the parent layer, and the `ref` property has been removed.
   *
   * The input is not modified. The output may contain references to portions
   * of the input.
   *
   * @private
   * @param {Array<Layer>} layers
   * @returns {Array<Layer>}
   */
  function derefLayers(layers) {
    layers = layers.slice(); // ??? What are we trying to achieve here?

    const map = Object.create(null); // stackoverflow.com/a/21079232/10082269
    layers.forEach( layer => { map[layer.id] = layer; } );

    for (let i = 0; i < layers.length; i++) {
      if ('ref' in layers[i]) {
        layers[i] = deref(layers[i], map[layers[i].ref]);
      }
    }

    return layers;
  }

  function deref(layer, parent) {
    const result = {};

    for (const k in layer) {
      if (k !== 'ref') {
        result[k] = layer[k];
      }
    }

    refProperties.forEach((k) => {
      if (k in parent) {
        result[k] = parent[k];
      }
    });

    return result;
  }

  function loadStyle(style, mapboxToken, callback) {
    if (typeof style === "object") {
      // style appears to be parsed JSON already. Prepare it for use
      return prepStyle(null, style, mapboxToken, callback);
    }
    // Style appears to be a URL string. Load the document, then prepare it
    var url = expandStyleURL(style, mapboxToken);
    var process = (err, doc) => prepStyle(err, doc, mapboxToken, callback);
    return readJSON(url, process);
  }

  function prepStyle(err, styleDoc, token, callback) {
    if (err) return callback(err);
    styleDoc.layers = derefLayers(styleDoc.layers);

    // Prepare the "sources" object
    var sKeys = Object.keys(styleDoc.sources);
    var numToDo = sKeys.length;

    // Add "sprite" object if needed
    if (styleDoc.sprite) {
      numToDo += 2;
      var spriteURLs = expandSpriteURLs(styleDoc.sprite, token);
      // We will replace the .sprite URL with an object containing
      // image and metadata
      styleDoc.sprite = {};
      // Retrieve both .json and .png files
      loadImage(spriteURLs.image, prepSpriteImage);
      readJSON(spriteURLs.meta, prepSpriteMeta);
    }

    sKeys.forEach( key => prepSource(styleDoc.sources, key, token, finishAll) );
      
    function prepSpriteImage(err, png) {
      if (err) finishAll(err);
      styleDoc.sprite.image = png;
      finishAll(null);
    }

    function prepSpriteMeta(err, json) {
      if (err) finishAll(err);
      styleDoc.sprite.meta = json;
      finishAll(null);
    }

    function finishAll(err) {
      if (err) return callback(err);
      if (--numToDo == 0) callback(null, styleDoc);
    }
  }

  function prepSource(sources, key, mbToken, callback) {
    var source = sources[key];
    var url = source.url;
    if (url === undefined) return callback(null); // No change

    // Load the referenced TileJSON document
    url = expandTileURL(url, mbToken);
    readJSON(url, merge);

    function merge(err, json) {
      if (err) callback(err);
      // Add any custom properties from the style document
      Object.keys(source).forEach( k2 => { json[k2] = source[k2]; } );
      // Replace current entry with the TileJSON data
      sources[key] = json;
      callback(null);
    }
  }

  function expandStyleURL(url, token) {
    var prefix = /^mapbox:\/\/styles\//;
    if ( !url.match(prefix) ) return url;
    var apiRoot = "https://api.mapbox.com/styles/v1/";
    return url.replace(prefix, apiRoot) + "?access_token=" + token;
  }

  function expandSpriteURLs(url, token) {
    // Returns an array containing urls to .png and .json files
    var prefix = /^mapbox:\/\/sprites\//;
    if ( !url.match(prefix) ) return {
      image: url + ".png", 
      meta: url + ".json",
    };

    // We have a Mapbox custom url. Expand to an absolute URL, as per the spec
    var apiRoot = "https://api.mapbox.com/styles/v1/";
    url = url.replace(prefix, apiRoot) + "/sprite";
    var tokenString = "?access_token=" + token;
    return {
      image: url + ".png" + tokenString, 
      meta: url + ".json" + tokenString,
    };
  }

  function expandTileURL(url, token) {
    var prefix = /^mapbox:\/\//;
    if ( !url.match(prefix) ) return url;
    var apiRoot = "https://api.mapbox.com/v4/";
    return url.replace(prefix, apiRoot) + ".json?secure&access_token=" + token;
  }

  // TODO: Move this to a worker thread. readMVT is CPU intensive
  // Also, convert images to ImageBitmaps?
  function initTileFactory(size, sources, styleGroups) {
    // Input size is the pixel size of the canvas used for vector rendering
    // Input sources is an OBJECT of TileJSON descriptions of tilesets
    // Input styleGroups is an ARRAY of objects { name, visible } for groupings of
    // style layers that will be rendered to separate canvases before compositing

    // For now we ignore sources that don't have tile endpoints
    const tileSourceKeys = Object.keys(sources).filter( k => {
      return sources[k].tiles && sources[k].tiles.length > 0;
    });

    function orderTile(z, x, y, callback = () => true) {
      var baseLamina = initLamina(size);
      const tile = {
        z, x, y,
        sources: {},
        loaded: false,
        img: baseLamina.img,
        ctx: baseLamina.ctx,
        rendered: baseLamina.rendered,
        laminae: {},
      };

      // Add canvases for separate rendering of layer groups, if supplied
      if (styleGroups && styleGroups.length > 1) {
        styleGroups.forEach( group => {
          tile.laminae[group.name] = initLamina(size);
        });
      }

      var numToDo = tileSourceKeys.length;
      tileSourceKeys.forEach( loadTile );

      function loadTile(srcKey) {
        var src = sources[srcKey];
        var tileHref = tileURL(src.tiles[0], z, x, y);
        if (src.type === "vector") {
          readMVT( tileHref, size, (err, data) => checkData(err, srcKey, data) );
        } else if (src.type === "raster") {
          loadImage( tileHref, (err, data) => checkData(err, srcKey, data) );
        }
      }

      function checkData(err, key, data) {
        if (err) return callback(err);

        tile.sources[key] = data;
        if (--numToDo > 0) return;

        tile.loaded = true;
        return callback(null, tile);
      }
      return tile;
    }

    return orderTile;
  }

  function initLamina(size) {
    let img = document.createElement("canvas");
    img.width = size;
    img.height = size;
    return { 
      img, 
      ctx: img.getContext("2d"),
      rendered: false,
    };
  }

  function tileURL(endpoint, z, x, y) {
    return endpoint.replace(/{z}/, z).replace(/{x}/, x).replace(/{y}/, y);
  }

  function getFeatures(layer, filterObj) {
    // Based on https://observablehq.com/@mbostock/d3-mapbox-vector-tiles
    if (!layer) return;
    var filter = prepFilter(filterObj);

    var features = layer.features.filter(filter);

    return (features.length < 1)
      ? false
      : { type: "FeatureCollection", features: features };
  }

  function prepFilter(filterObj) {
    // filterObj is a filter definition following the "deprecated" syntax:
    // https://docs.mapbox.com/mapbox-gl-js/style-spec/#other-filter
    if (!filterObj) return () => true;

    var type, key, vals;

    // If this is a combined filter, the vals are themselves filter definitions
    [type, ...vals] = filterObj;
    switch (type) {
      case "all": {
        let filters = vals.map(prepFilter);  // WARNING: Iteratively recursive!
        return (d) => filters.every( filt => filt(d) );
      }
      case "any": {
        let filters = vals.map(prepFilter);
        return (d) => filters.some( filt => filt(d) );
      }
      case "none": {
        let filters = vals.map(prepFilter);
        return (d) => filters.every( filt => !filt(d) );
      }
      default: break; // Must be a simple filter
    }

    [type, key, ...vals] = filterObj;
    var getVal = initFeatureValGetter(key);

    switch (type) {
      // Existential Filters
      case "has": 
        return d => !!getVal(d); // !! forces a Boolean return
      case "!has": 
        return d => !getVal(d);

      // Comparison Filters
      case "==": 
        return d => getVal(d) === vals[0];
      case "!=":
        return d => getVal(d) !== vals[0];
      case ">":
        return d => getVal(d) > vals[0];
      case ">=":
        return d => getVal(d) >= vals[0];
      case "<":
        return d => getVal(d) < vals[0];
      case "<=":
        return d => getVal(d) <= vals[0];

      // Set Membership Filters
      case "in" :
        return d => vals.includes( getVal(d) );
      case "!in" :
        return d => !vals.includes( getVal(d) );
      default:
        console.log("prepFilter: unknown filter type = " + filterObj[0]);
    }
    // No recognizable filter criteria. Return a filter that is always true
    return () => true;
  }

  function initFeatureValGetter(key) {
    switch (key) {
      case "$type":
        // NOTE: data includes MultiLineString, MultiPolygon, etc-NOT IN SPEC
        return f => {
          let t = f.geometry.type;
          if (t === "MultiPoint") return "Point";
          if (t === "MultiLineString") return "LineString";
          if (t === "MultiPolygon") return "Polygon";
          return t;
        };
      case "$id":
        return f => f.id;
      default:
        return f => f.properties[key];
    }
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var csscolorparser = createCommonjsModule(function (module, exports) {
  // (c) Dean McNamee <dean@gmail.com>, 2012.
  //
  // https://github.com/deanm/css-color-parser-js
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  // IN THE SOFTWARE.

  // http://www.w3.org/TR/css3-color/
  var kCSSColorTable = {
    "transparent": [0,0,0,0], "aliceblue": [240,248,255,1],
    "antiquewhite": [250,235,215,1], "aqua": [0,255,255,1],
    "aquamarine": [127,255,212,1], "azure": [240,255,255,1],
    "beige": [245,245,220,1], "bisque": [255,228,196,1],
    "black": [0,0,0,1], "blanchedalmond": [255,235,205,1],
    "blue": [0,0,255,1], "blueviolet": [138,43,226,1],
    "brown": [165,42,42,1], "burlywood": [222,184,135,1],
    "cadetblue": [95,158,160,1], "chartreuse": [127,255,0,1],
    "chocolate": [210,105,30,1], "coral": [255,127,80,1],
    "cornflowerblue": [100,149,237,1], "cornsilk": [255,248,220,1],
    "crimson": [220,20,60,1], "cyan": [0,255,255,1],
    "darkblue": [0,0,139,1], "darkcyan": [0,139,139,1],
    "darkgoldenrod": [184,134,11,1], "darkgray": [169,169,169,1],
    "darkgreen": [0,100,0,1], "darkgrey": [169,169,169,1],
    "darkkhaki": [189,183,107,1], "darkmagenta": [139,0,139,1],
    "darkolivegreen": [85,107,47,1], "darkorange": [255,140,0,1],
    "darkorchid": [153,50,204,1], "darkred": [139,0,0,1],
    "darksalmon": [233,150,122,1], "darkseagreen": [143,188,143,1],
    "darkslateblue": [72,61,139,1], "darkslategray": [47,79,79,1],
    "darkslategrey": [47,79,79,1], "darkturquoise": [0,206,209,1],
    "darkviolet": [148,0,211,1], "deeppink": [255,20,147,1],
    "deepskyblue": [0,191,255,1], "dimgray": [105,105,105,1],
    "dimgrey": [105,105,105,1], "dodgerblue": [30,144,255,1],
    "firebrick": [178,34,34,1], "floralwhite": [255,250,240,1],
    "forestgreen": [34,139,34,1], "fuchsia": [255,0,255,1],
    "gainsboro": [220,220,220,1], "ghostwhite": [248,248,255,1],
    "gold": [255,215,0,1], "goldenrod": [218,165,32,1],
    "gray": [128,128,128,1], "green": [0,128,0,1],
    "greenyellow": [173,255,47,1], "grey": [128,128,128,1],
    "honeydew": [240,255,240,1], "hotpink": [255,105,180,1],
    "indianred": [205,92,92,1], "indigo": [75,0,130,1],
    "ivory": [255,255,240,1], "khaki": [240,230,140,1],
    "lavender": [230,230,250,1], "lavenderblush": [255,240,245,1],
    "lawngreen": [124,252,0,1], "lemonchiffon": [255,250,205,1],
    "lightblue": [173,216,230,1], "lightcoral": [240,128,128,1],
    "lightcyan": [224,255,255,1], "lightgoldenrodyellow": [250,250,210,1],
    "lightgray": [211,211,211,1], "lightgreen": [144,238,144,1],
    "lightgrey": [211,211,211,1], "lightpink": [255,182,193,1],
    "lightsalmon": [255,160,122,1], "lightseagreen": [32,178,170,1],
    "lightskyblue": [135,206,250,1], "lightslategray": [119,136,153,1],
    "lightslategrey": [119,136,153,1], "lightsteelblue": [176,196,222,1],
    "lightyellow": [255,255,224,1], "lime": [0,255,0,1],
    "limegreen": [50,205,50,1], "linen": [250,240,230,1],
    "magenta": [255,0,255,1], "maroon": [128,0,0,1],
    "mediumaquamarine": [102,205,170,1], "mediumblue": [0,0,205,1],
    "mediumorchid": [186,85,211,1], "mediumpurple": [147,112,219,1],
    "mediumseagreen": [60,179,113,1], "mediumslateblue": [123,104,238,1],
    "mediumspringgreen": [0,250,154,1], "mediumturquoise": [72,209,204,1],
    "mediumvioletred": [199,21,133,1], "midnightblue": [25,25,112,1],
    "mintcream": [245,255,250,1], "mistyrose": [255,228,225,1],
    "moccasin": [255,228,181,1], "navajowhite": [255,222,173,1],
    "navy": [0,0,128,1], "oldlace": [253,245,230,1],
    "olive": [128,128,0,1], "olivedrab": [107,142,35,1],
    "orange": [255,165,0,1], "orangered": [255,69,0,1],
    "orchid": [218,112,214,1], "palegoldenrod": [238,232,170,1],
    "palegreen": [152,251,152,1], "paleturquoise": [175,238,238,1],
    "palevioletred": [219,112,147,1], "papayawhip": [255,239,213,1],
    "peachpuff": [255,218,185,1], "peru": [205,133,63,1],
    "pink": [255,192,203,1], "plum": [221,160,221,1],
    "powderblue": [176,224,230,1], "purple": [128,0,128,1],
    "rebeccapurple": [102,51,153,1],
    "red": [255,0,0,1], "rosybrown": [188,143,143,1],
    "royalblue": [65,105,225,1], "saddlebrown": [139,69,19,1],
    "salmon": [250,128,114,1], "sandybrown": [244,164,96,1],
    "seagreen": [46,139,87,1], "seashell": [255,245,238,1],
    "sienna": [160,82,45,1], "silver": [192,192,192,1],
    "skyblue": [135,206,235,1], "slateblue": [106,90,205,1],
    "slategray": [112,128,144,1], "slategrey": [112,128,144,1],
    "snow": [255,250,250,1], "springgreen": [0,255,127,1],
    "steelblue": [70,130,180,1], "tan": [210,180,140,1],
    "teal": [0,128,128,1], "thistle": [216,191,216,1],
    "tomato": [255,99,71,1], "turquoise": [64,224,208,1],
    "violet": [238,130,238,1], "wheat": [245,222,179,1],
    "white": [255,255,255,1], "whitesmoke": [245,245,245,1],
    "yellow": [255,255,0,1], "yellowgreen": [154,205,50,1]};

  function clamp_css_byte(i) {  // Clamp to integer 0 .. 255.
    i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
    return i < 0 ? 0 : i > 255 ? 255 : i;
  }

  function clamp_css_float(f) {  // Clamp to float 0.0 .. 1.0.
    return f < 0 ? 0 : f > 1 ? 1 : f;
  }

  function parse_css_int(str) {  // int or percentage.
    if (str[str.length - 1] === '%')
      return clamp_css_byte(parseFloat(str) / 100 * 255);
    return clamp_css_byte(parseInt(str));
  }

  function parse_css_float(str) {  // float or percentage.
    if (str[str.length - 1] === '%')
      return clamp_css_float(parseFloat(str) / 100);
    return clamp_css_float(parseFloat(str));
  }

  function css_hue_to_rgb(m1, m2, h) {
    if (h < 0) h += 1;
    else if (h > 1) h -= 1;

    if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;
    if (h * 2 < 1) return m2;
    if (h * 3 < 2) return m1 + (m2 - m1) * (2/3 - h) * 6;
    return m1;
  }

  function parseCSSColor(css_str) {
    // Remove all whitespace, not compliant, but should just be more accepting.
    var str = css_str.replace(/ /g, '').toLowerCase();

    // Color keywords (and transparent) lookup.
    if (str in kCSSColorTable) return kCSSColorTable[str].slice();  // dup.

    // #abc and #abc123 syntax.
    if (str[0] === '#') {
      if (str.length === 4) {
        var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
        if (!(iv >= 0 && iv <= 0xfff)) return null;  // Covers NaN.
        return [((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
                (iv & 0xf0) | ((iv & 0xf0) >> 4),
                (iv & 0xf) | ((iv & 0xf) << 4),
                1];
      } else if (str.length === 7) {
        var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
        if (!(iv >= 0 && iv <= 0xffffff)) return null;  // Covers NaN.
        return [(iv & 0xff0000) >> 16,
                (iv & 0xff00) >> 8,
                iv & 0xff,
                1];
      }

      return null;
    }

    var op = str.indexOf('('), ep = str.indexOf(')');
    if (op !== -1 && ep + 1 === str.length) {
      var fname = str.substr(0, op);
      var params = str.substr(op+1, ep-(op+1)).split(',');
      var alpha = 1;  // To allow case fallthrough.
      switch (fname) {
        case 'rgba':
          if (params.length !== 4) return null;
          alpha = parse_css_float(params.pop());
          // Fall through.
        case 'rgb':
          if (params.length !== 3) return null;
          return [parse_css_int(params[0]),
                  parse_css_int(params[1]),
                  parse_css_int(params[2]),
                  alpha];
        case 'hsla':
          if (params.length !== 4) return null;
          alpha = parse_css_float(params.pop());
          // Fall through.
        case 'hsl':
          if (params.length !== 3) return null;
          var h = (((parseFloat(params[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
          // NOTE(deanm): According to the CSS spec s/l should only be
          // percentages, but we don't bother and let float or percentage.
          var s = parse_css_float(params[1]);
          var l = parse_css_float(params[2]);
          var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
          var m1 = l * 2 - m2;
          return [clamp_css_byte(css_hue_to_rgb(m1, m2, h+1/3) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h-1/3) * 255),
                  alpha];
        default:
          return null;
      }
    }

    return null;
  }

  try { exports.parseCSSColor = parseCSSColor; } catch(e) { }
  });
  var csscolorparser_1 = csscolorparser.parseCSSColor;

  function evalStyle(styleFunction, zoom) {
    var styleFunc = buildStyleFunc(styleFunction);
    return styleFunc(zoom);
  }

  function buildStyleFunc(style) {
    var styleFunc, getArg;

    if (typeof style !== "object" || Array.isArray(style)) {
      // Includes the case style === undefined
      styleFunc = () => style;
      styleFunc.type = "constant";

    } else if (!style.property || style.property === "zoom") {
      getArg = (zoom, feature) => zoom;
      styleFunc = getStyleFunc(style, getArg);
      styleFunc.type = "zoom";

    } else {
      getArg = (zoom, feature) => feature.properties[style.property];
      styleFunc = getStyleFunc(style, getArg);
      styleFunc.type = "property";

    } // NOT IMPLEMENTED: zoom-and-property functions

    return styleFunc;
  }

  function getStyleFunc(style, getArg) {
    if (style.type === "identity") return getArg;

    // We should be building a stop function now. Make sure we have enough info
    var stops = style.stops;
    if (!stops || stops.length < 2 || stops[0].length !== 2) {
      console.log("buildStyleFunc: style = " + JSON.stringify(style));
      console.log("ERROR in buildStyleFunc: failed to understand style!");
      return;
    }

    var stopFunc = buildStopFunc(stops, style.base);
    return (zoom, feature) => stopFunc( getArg(zoom, feature) );
  }

  function buildStopFunc(stops, base = 1) {
    const izm = stops.length - 1;
    const interpolate = getInterpolator(stops[0][1]);

    return function(x) {
      let iz = stops.findIndex(stop => stop[0] > x);

      if (iz === 0) return stops[0][1]; // x is below first stop
      if (iz < 0) return stops[izm][1]; // x is above last stop

      let t = interpFactor(base, stops[iz-1][0], x, stops[iz][0]);

      return interpolate(stops[iz-1][1], stops[iz][1], t);
    }
  }

  function getInterpolator(sampleVal) {
    var type = typeof sampleVal;

    // Linear interpolator for numbers
    if (type === "number") return (v1, v2, t) => v1 + t * (v2 - v1);

    var isColor = (type === "string" && csscolorparser_1(sampleVal));
    return (isColor)
      ? (v1, v2, t) => interpColor(csscolorparser_1(v1), csscolorparser_1(v2), t)
      : (v1, v2, t) => v1; // Assume step function for other types
  }

  function interpFactor(base, x0, x, x1) {
    // Follows mapbox-gl-js, style-spec/function/index.js.
    // NOTE: https://github.com/mapbox/mapbox-gl-js/issues/2698 not addressed!
    const range = x1 - x0;
    if (range === 0) return 0;

    const dx = x - x0;
    if (base === 1) return dx / range;

    return (Math.pow(base, dx) - 1) / (Math.pow(base, range) - 1);
  }

  function interpColor(c0, c1, t) {
    // Inputs c0, c1 are 4-element RGBA arrays as returned by parseCSSColor
    let c = [];
    for (let i = 0; i < 4; i++) {
      c[i] = c0[i] + t * (c1[i] - c0[i]);
    }
    return "rgba(" +
      Math.round(c[0]) + ", " +
      Math.round(c[1]) + ", " + 
      Math.round(c[2]) + ", " +
      c[3] + ")";
  }

  // Renders layers that cover the whole tile (like painting with a roller)
  function initRoller(ctx) {
    // Input ctx is a Canvas 2D rendering context
    const canvSize = ctx.canvas.width;

    return {
      fillBackground,
      drawRaster,
    };

    function fillBackground(style, zoom) {
      // Cover the tile with a bucket of paint
      ctx.fillStyle = evalStyle(style.paint["background-color"], zoom);
      ctx.globalAlpha = evalStyle(style.paint["background-opacity"], zoom);
      ctx.fillRect(0, 0, canvSize, canvSize);
    }

    function drawRaster(style, zoom, image) {
      // Cover the tile with a prettily patterned wallpaper
      var paint = style.paint;
      if (paint !== undefined) {
        ctx.globalAlpha = evalStyle(paint["raster-opacity"], zoom);
        // Missing raster-hue-rotate, raster-brightness-min/max,
        // raster-saturation, raster-contrast
      }
      // TODO: we are forcing one tile to cover the canvas!
      // In some cases (e.g. Mapbox Satellite Streets) the raster tiles may
      // be half the size of the vector canvas, so we need 4 of them...
      ctx.drawImage(image, 0, 0, canvSize, canvSize);
    }
  }

  // Adds floating point numbers with twice the normal precision.
  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
  // 305–363 (1997).
  // Code adapted from GeographicLib by Charles F. F. Karney,
  // http://geographiclib.sourceforge.net/

  function adder() {
    return new Adder;
  }

  function Adder() {
    this.reset();
  }

  Adder.prototype = {
    constructor: Adder,
    reset: function() {
      this.s = // rounded value
      this.t = 0; // exact error
    },
    add: function(y) {
      add(temp, y, this.t);
      add(this, temp.s, this.s);
      if (this.s) this.t += temp.t;
      else this.s = temp.t;
    },
    valueOf: function() {
      return this.s;
    }
  };

  var temp = new Adder;

  function add(adder, a, b) {
    var x = adder.s = a + b,
        bv = x - a,
        av = x - bv;
    adder.t = (a - av) + (b - bv);
  }

  var pi = Math.PI;
  var tau = pi * 2;

  var abs = Math.abs;
  var sqrt = Math.sqrt;

  function noop() {}

  function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      streamGeometryType[geometry.type](geometry, stream);
    }
  }

  var streamObjectType = {
    Feature: function(object, stream) {
      streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function(object, stream) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) streamGeometry(features[i].geometry, stream);
    }
  };

  var streamGeometryType = {
    Sphere: function(object, stream) {
      stream.sphere();
    },
    Point: function(object, stream) {
      object = object.coordinates;
      stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
    },
    LineString: function(object, stream) {
      streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamLine(coordinates[i], stream, 0);
    },
    Polygon: function(object, stream) {
      streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function(object, stream) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) streamGeometry(geometries[i], stream);
    }
  };

  function streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    stream.lineEnd();
  }

  function streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while (++i < n) streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
  }

  function geoStream(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      streamObjectType[object.type](object, stream);
    } else {
      streamGeometry(object, stream);
    }
  }

  var areaRingSum = adder();

  var areaSum = adder();

  var deltaSum = adder();

  var sum = adder();

  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function bisector(compare) {
    if (compare.length === 1) compare = ascendingComparator(compare);
    return {
      left: function(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }
    };
  }

  function ascendingComparator(f) {
    return function(d, x) {
      return ascending(f(d), x);
    };
  }

  var ascendingBisect = bisector(ascending);

  var lengthSum = adder();

  function identity(x) {
    return x;
  }

  var areaSum$1 = adder(),
      areaRingSum$1 = adder(),
      x00,
      y00,
      x0,
      y0;

  var areaStream = {
    point: noop,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: function() {
      areaStream.lineStart = areaRingStart;
      areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
      areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;
      areaSum$1.add(abs(areaRingSum$1));
      areaRingSum$1.reset();
    },
    result: function() {
      var area = areaSum$1 / 2;
      areaSum$1.reset();
      return area;
    }
  };

  function areaRingStart() {
    areaStream.point = areaPointFirst;
  }

  function areaPointFirst(x, y) {
    areaStream.point = areaPoint;
    x00 = x0 = x, y00 = y0 = y;
  }

  function areaPoint(x, y) {
    areaRingSum$1.add(y0 * x - x0 * y);
    x0 = x, y0 = y;
  }

  function areaRingEnd() {
    areaPoint(x00, y00);
  }

  var x0$1 = Infinity,
      y0$1 = x0$1,
      x1 = -x0$1,
      y1 = x1;

  var boundsStream = {
    point: boundsPoint,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: noop,
    polygonEnd: noop,
    result: function() {
      var bounds = [[x0$1, y0$1], [x1, y1]];
      x1 = y1 = -(y0$1 = x0$1 = Infinity);
      return bounds;
    }
  };

  function boundsPoint(x, y) {
    if (x < x0$1) x0$1 = x;
    if (x > x1) x1 = x;
    if (y < y0$1) y0$1 = y;
    if (y > y1) y1 = y;
  }

  // TODO Enforce positive area for exterior, negative area for interior?

  var X0 = 0,
      Y0 = 0,
      Z0 = 0,
      X1 = 0,
      Y1 = 0,
      Z1 = 0,
      X2 = 0,
      Y2 = 0,
      Z2 = 0,
      x00$1,
      y00$1,
      x0$2,
      y0$2;

  var centroidStream = {
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
      centroidStream.lineStart = centroidRingStart;
      centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
      centroidStream.point = centroidPoint;
      centroidStream.lineStart = centroidLineStart;
      centroidStream.lineEnd = centroidLineEnd;
    },
    result: function() {
      var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
          : Z1 ? [X1 / Z1, Y1 / Z1]
          : Z0 ? [X0 / Z0, Y0 / Z0]
          : [NaN, NaN];
      X0 = Y0 = Z0 =
      X1 = Y1 = Z1 =
      X2 = Y2 = Z2 = 0;
      return centroid;
    }
  };

  function centroidPoint(x, y) {
    X0 += x;
    Y0 += y;
    ++Z0;
  }

  function centroidLineStart() {
    centroidStream.point = centroidPointFirstLine;
  }

  function centroidPointFirstLine(x, y) {
    centroidStream.point = centroidPointLine;
    centroidPoint(x0$2 = x, y0$2 = y);
  }

  function centroidPointLine(x, y) {
    var dx = x - x0$2, dy = y - y0$2, z = sqrt(dx * dx + dy * dy);
    X1 += z * (x0$2 + x) / 2;
    Y1 += z * (y0$2 + y) / 2;
    Z1 += z;
    centroidPoint(x0$2 = x, y0$2 = y);
  }

  function centroidLineEnd() {
    centroidStream.point = centroidPoint;
  }

  function centroidRingStart() {
    centroidStream.point = centroidPointFirstRing;
  }

  function centroidRingEnd() {
    centroidPointRing(x00$1, y00$1);
  }

  function centroidPointFirstRing(x, y) {
    centroidStream.point = centroidPointRing;
    centroidPoint(x00$1 = x0$2 = x, y00$1 = y0$2 = y);
  }

  function centroidPointRing(x, y) {
    var dx = x - x0$2,
        dy = y - y0$2,
        z = sqrt(dx * dx + dy * dy);

    X1 += z * (x0$2 + x) / 2;
    Y1 += z * (y0$2 + y) / 2;
    Z1 += z;

    z = y0$2 * x - x0$2 * y;
    X2 += z * (x0$2 + x);
    Y2 += z * (y0$2 + y);
    Z2 += z * 3;
    centroidPoint(x0$2 = x, y0$2 = y);
  }

  function PathContext(context) {
    this._context = context;
  }

  PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function(_) {
      return this._radius = _, this;
    },
    polygonStart: function() {
      this._line = 0;
    },
    polygonEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line === 0) this._context.closePath();
      this._point = NaN;
    },
    point: function(x, y) {
      switch (this._point) {
        case 0: {
          this._context.moveTo(x, y);
          this._point = 1;
          break;
        }
        case 1: {
          this._context.lineTo(x, y);
          break;
        }
        default: {
          this._context.moveTo(x + this._radius, y);
          this._context.arc(x, y, this._radius, 0, tau);
          break;
        }
      }
    },
    result: noop
  };

  var lengthSum$1 = adder(),
      lengthRing,
      x00$2,
      y00$2,
      x0$3,
      y0$3;

  var lengthStream = {
    point: noop,
    lineStart: function() {
      lengthStream.point = lengthPointFirst;
    },
    lineEnd: function() {
      if (lengthRing) lengthPoint(x00$2, y00$2);
      lengthStream.point = noop;
    },
    polygonStart: function() {
      lengthRing = true;
    },
    polygonEnd: function() {
      lengthRing = null;
    },
    result: function() {
      var length = +lengthSum$1;
      lengthSum$1.reset();
      return length;
    }
  };

  function lengthPointFirst(x, y) {
    lengthStream.point = lengthPoint;
    x00$2 = x0$3 = x, y00$2 = y0$3 = y;
  }

  function lengthPoint(x, y) {
    x0$3 -= x, y0$3 -= y;
    lengthSum$1.add(sqrt(x0$3 * x0$3 + y0$3 * y0$3));
    x0$3 = x, y0$3 = y;
  }

  function PathString() {
    this._string = [];
  }

  PathString.prototype = {
    _radius: 4.5,
    _circle: circle(4.5),
    pointRadius: function(_) {
      if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
      return this;
    },
    polygonStart: function() {
      this._line = 0;
    },
    polygonEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line === 0) this._string.push("Z");
      this._point = NaN;
    },
    point: function(x, y) {
      switch (this._point) {
        case 0: {
          this._string.push("M", x, ",", y);
          this._point = 1;
          break;
        }
        case 1: {
          this._string.push("L", x, ",", y);
          break;
        }
        default: {
          if (this._circle == null) this._circle = circle(this._radius);
          this._string.push("M", x, ",", y, this._circle);
          break;
        }
      }
    },
    result: function() {
      if (this._string.length) {
        var result = this._string.join("");
        this._string = [];
        return result;
      } else {
        return null;
      }
    }
  };

  function circle(radius) {
    return "m0," + radius
        + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
        + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
        + "z";
  }

  function index(projection, context) {
    var pointRadius = 4.5,
        projectionStream,
        contextStream;

    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        geoStream(object, projectionStream(contextStream));
      }
      return contextStream.result();
    }

    path.area = function(object) {
      geoStream(object, projectionStream(areaStream));
      return areaStream.result();
    };

    path.measure = function(object) {
      geoStream(object, projectionStream(lengthStream));
      return lengthStream.result();
    };

    path.bounds = function(object) {
      geoStream(object, projectionStream(boundsStream));
      return boundsStream.result();
    };

    path.centroid = function(object) {
      geoStream(object, projectionStream(centroidStream));
      return centroidStream.result();
    };

    path.projection = function(_) {
      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
    };

    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return path;
    };

    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };

    return path.projection(projection).context(context);
  }

  // Renders layers made of points, lines, polygons (like painting with a brush)
  function initBrush(ctx) {
    // Input ctx is a Canvas 2D rendering context

    // Initialize the D3 path generator. 
    // First param is the projection. Keep the data's native coordinates for now
    const path = index(null, ctx);
    const setRadius = (radius) => { if (radius) path.pointRadius(radius); };

    return function(style, zoom, data) {
      var layout = style.layout;
      var paint = style.paint;
      var method;

      const dataDependencies = [];

      // Set rendering context state based on values specified in the style.
      // For data-dependent styles, store the state FUNCTIONS in dataDependencies
      switch (style.type) {
        case "circle":
          setState("", paint["circle-radius"], setRadius);
          setState("fillStyle", paint["circle-color"]);
          setState("globalAlpha", paint["circle-opacity"]);
          method = "fill";
          break;

        case "line":
          if (layout) {
            setState("lineCap", layout["line-cap"]);
            setState("lineJoin", layout["line-join"]);
            setState("miterLimit", layout["line-miter-limit"]);
            // Missing line-round-limit
          }
          setState("lineWidth", paint["line-width"]);
          setState("globalAlpha", paint["line-opacity"]);
          setState("strokeStyle", paint["line-color"]);
          // Missing line-gap-width, line-translate, line-translate-anchor,
          //  line-offset, line-blur, line-gradient, line-pattern, line-dasharray
          method = "stroke";
          break;

        case "fill":
          setState("fillStyle", paint["fill-color"]);
          setState("globalAlpha", paint["fill-opacity"]);
          // Missing fill-outline-color, fill-translate, fill-translate-anchor,
          //  fill-pattern
          method = "fill";
          break;

        default:
          // Missing fill-extrusion, heatmap, hillshade
          return console.log("ERROR in brush.draw: layer.type = " +
              style.type + " not supported!");
      }

      // Draw the features in the data
      draw(data, dataDependencies, zoom, method);
      return;

      function setState(option, val, stateFunc) { // Nested for access to zoom
        if (!stateFunc) stateFunc = (val) => { ctx[option] = val; };

        let styleFunc = buildStyleFunc(val);
        if (styleFunc.type !== "property") return stateFunc(styleFunc(zoom));

        dataDependencies.push({ styleFunc, stateFunc });
      }
    }

    function draw(data, dataDependencies, zoom, method) {
      if (dataDependencies.length == 0) return drawPath(data, method);

      sortAndDraw(data, dataDependencies, zoom, method);
      //data.features.forEach(feature => {
      //  dataDependencies.forEach( dep => {
      //    dep.stateFunc( dep.styleFunc(zoom, feature) )
      //  });
      // drawPath(feature, method);
      //});
    }

    function drawPath(data, method) {
      ctx.beginPath();
      path(data);
      ctx[method]();
    }

    function sortAndDraw(data, dataDependencies, zoom, method) {
      // Build an array of features, style values, and a sortable id
      let features = data.features.map( feature => {
        let vals = dataDependencies.map( dep => dep.styleFunc(zoom, feature) );
        let id = vals.join("");
        return { id, vals, feature };
      });

      // Sort the array
      features.sort( (a, b) => (a.id < b.id) ? -1 : 1 );

      // Loop through the array, accumulating paths and rendering
      let numFeatures = features.length;
      let i = 0;
      while (i < numFeatures) {
        // Set state for this group of features (only when style id changes)
        dataDependencies.forEach( (dep, index) => {
          dep.stateFunc(features[i].vals[index]);
        });
        // Add these features to the path
        ctx.beginPath();
        let id = features[i].id;
        while (i < numFeatures && features[i].id === id) {
          path(features[i].feature);
          i++;
        }
        // Render these features
        ctx[method]();
      }
    }
  }

  function getTokenParser(tokenText) {
    if (!tokenText) return () => undefined;
    const tokenPattern = /{([^{}]+)}/g;

    // We break tokenText into pieces that are either plain text or tokens,
    // then construct an array of functions to parse each piece
    var tokenFuncs = [];
    var charIndex  = 0;
    while (charIndex < tokenText.length) {
      // Find the next token
      let result = tokenPattern.exec(tokenText);

      if (!result) {
        // No tokens left. Parse the plain text after the last token
        let str = tokenText.substring(charIndex);
        tokenFuncs.push(props => str);
        break;
      } else if (result.index > charIndex) {
        // There is some plain text before the token
        let str = tokenText.substring(charIndex, result.index);
        tokenFuncs.push(props => str);
      }

      // Add a function to process the current token
      let token = result[1];
      tokenFuncs.push(props => props[token]);
      charIndex = tokenPattern.lastIndex;
    }
    
    // We now have an array of functions returning either a text string or
    // a feature property
    // Return a function that assembles everything
    return function(properties) {
      return tokenFuncs.reduce(concat, "");
      function concat(str, tokenFunc) {
        let text = tokenFunc(properties) || "";
        return str += text;
      }
    };
  }

  function getFontString(fontSize, fontFace) {
    // Round fontSize to the nearest 0.1 pixel
    fontSize = Math.round(10.0 * fontSize) * 0.1;

    // Get the last word of the first font string
    var lastWord;
    if (fontFace) lastWord = fontFace[0].split(" ").splice(-1)[0].toLowerCase();
    
    var fontStyle;
    switch (lastWord) {
      case "bold":
        fontStyle = "bold";
        break;
      case "italic":
        fontStyle = "italic";
        break;
    }

    return (fontStyle)
      ? fontStyle + " " + fontSize + 'px "PT Sans", sans-serif'
      : fontSize + 'px "PT Sans", sans-serif';
  }

  function initTextLabeler(ctx, style, zoom) {
    var labelText, labelLength, labelHeight, x, y;
    var posShift = [0, 0];
    var layout = style.layout;

    var textField = evalStyle(layout["text-field"], zoom);
    var textParser = getTokenParser(textField);

    // Construct the ctx.font string from text-size and text-font
    var fontSize = evalStyle(layout["text-size"], zoom) || 16;
    var fontFace = evalStyle(layout["text-font"], zoom);
    ctx.font = getFontString(fontSize, fontFace);

    // Get some basic style parameters
    let lineHeight = evalStyle(layout["text-line-height"], zoom) || 1.2;
    let textPadding = evalStyle(layout["text-padding"], zoom) || 2.0;
    let textOffset = evalStyle(layout["text-offset"], zoom) || [0, 0];

    // Set text-anchor
    var anchor = evalStyle(layout["text-anchor"], zoom);
    setAnchor(anchor);

    // Setup the text transform function
    var transformCode = evalStyle(layout["text-transform"], zoom);
    var transform = constructTextTransform(transformCode);

    // Set text color and halo properties
    var paint = style.paint;
    ctx.fillStyle   = evalStyle(paint["text-color"], zoom);
    ctx.strokeStyle = evalStyle(paint["text-halo-color"], zoom);
    var haloWidth   = evalStyle(paint["text-halo-width"], zoom) || 0;
    if (haloWidth > 0) {
      ctx.lineWidth = haloWidth * 2.0;
      ctx.lineJoin = "round";
    }

    return {
      measure,
      draw,
    };

    function measure(feature) {
      labelText = textParser(feature.properties);
      if (!labelText) return;

      labelText = transform(labelText);
      labelLength = ctx.measureText(labelText).width;
      labelHeight = fontSize * lineHeight;

      var coords = feature.geometry.coordinates;
      // Compute coordinates of bottom left corner of text
      x = coords[0] + textOffset[0] * fontSize + posShift[0] * labelLength;
      y = coords[1] + textOffset[1] * labelHeight + posShift[1] * labelHeight;

      // Return a bounding box object
      return [
        [x - textPadding, y - labelHeight - textPadding],
        [x + labelLength + textPadding, y + textPadding]
      ];
    }

    function draw() {
      if (!labelText) return;

      if (haloWidth > 0) ctx.strokeText(labelText, x, y);
      ctx.fillText(labelText, x, y);
    }

    function setAnchor(anchor) {
      // Set baseline. We let Canvas2D use textBaseline = "bottom", and use
      // posShift to shift the text box for other requested baselines
      ctx.textBaseline = "bottom";
      switch (anchor) {
        case "top-left":
        case "top-right":
        case "top":
          //ctx.textBaseline = "top";
          posShift[1] = 1.0;
          break;
        case "bottom-left":
        case "bottom-right":
        case "bottom":
          posShift[1] = 0.0;
          //ctx.textBaseline = "bottom";
          break;
        case "left":
        case "right":
        case "center":
        default:
          //ctx.textBaseline = "middle";
          posShift[1] = 0.5;
      }
      // Set textAlign. We let Canvas2D use textAlign = "left", and use
      // posShift to shift the text box for other requested alignments
      ctx.textAlign = "left";
      switch (anchor) {
        case "top-left":
        case "bottom-left":
        case "left":
          //ctx.textAlign = "left";
          posShift[0] = 0.0;
          break;
        case "top-right":
        case "bottom-right":
        case "right":
          //ctx.textAlign = "right";
          posShift[0] = -1.0;
          break;
        case "top":
        case "bottom":
        case "center":
        default:
          //ctx.textAlign = "center";
          posShift[0] = -0.5;
      }
      return;
    }
  }

  function constructTextTransform(code) {
    switch (code) {
      case "uppercase":
        return f => f.toUpperCase();
      case "lowercase":
        return f => f.toLowerCase();
      case "none":
      default:
        return f => f;
    }
  }

  function initIconLabeler(ctx, style, zoom, sprite) {
    var layout = style.layout;
    var spriteID, spriteMeta, x, y;

    // Get sprite metadata
    var spriteName = evalStyle(layout["icon-image"], zoom);
    var iconParser = getTokenParser(spriteName);

    var iconPadding = evalStyle(layout["icon-padding"], zoom) || 2;

    return {
      measure,
      draw,
    };

    function measure(feature) {
      spriteID = iconParser(feature.properties);
      if (!spriteID) return;

      spriteMeta = sprite.meta[spriteID];

      var coords = feature.geometry.coordinates;
      x = Math.round(coords[0] - spriteMeta.width / 2);
      y = Math.round(coords[1] - spriteMeta.height / 2);

      return [
        [x - iconPadding, y - iconPadding],
        [x + spriteMeta.width + iconPadding, y + spriteMeta.height + iconPadding]
      ];
    } 

    function draw() {
      if (!spriteID) return;

      ctx.drawImage(
          sprite.image,
          spriteMeta.x,
          spriteMeta.y,
          spriteMeta.width,
          spriteMeta.height,
          x,
          y,
          spriteMeta.width,
          spriteMeta.height
          );
    }
  }

  function initLabeler(ctx, sprite) {
    var boxes = [];

    return {
      clearBoxes,
      draw,
    };

    function clearBoxes() {
      boxes = [];
    }

    function draw(style, zoom, data) {
      var layout = style.layout;
      if (layout["symbol-placement"] === "line") return;

      const textLabeler = initTextLabeler(ctx, style, zoom);
      const iconLabeler = initIconLabeler(ctx, style, zoom, sprite);

      data.features.forEach(drawLabel);

      function drawLabel(feature) {
        var textBox = textLabeler.measure(feature);
        if ( collides(textBox) ) return;

        var iconBox = iconLabeler.measure(feature);
        if ( collides(iconBox) ) return;

        if (textBox) boxes.push(textBox);
        if (iconBox) boxes.push(iconBox);

        // Draw the labels
        iconLabeler.draw();
        textLabeler.draw();
        return;
      }
    }

    function collides(newBox) {
      if (!newBox) return false;
      return boxes.some( box => intersects(box, newBox) );
    }
  }

  function intersects(box1, box2) {
    // box[0] = [xmin, ymin]; box[1] = [xmax, ymax]
    if (box1[0][0] > box2[1][0]) return false;
    if (box2[0][0] > box1[1][0]) return false;
    if (box1[0][1] > box2[1][1]) return false;
    if (box2[0][1] > box1[1][1]) return false;

    return true;
  }

  function initRenderer(canvSize, styleLayers, styleGroups, sprite) {
    // Input canvSize is an integer, for the pixel size of the (square) tiles
    // Input styleLayers points to the .layers property of a Mapbox style document
    //   Specification: https://docs.mapbox.com/mapbox-gl-js/style-spec/
    // Input styleGroups is a list of style layer groups identified by a
    //   "tilekiln-group" property of each layer
    // Input sprite (if defined) is an object with image and meta properties

    // Create canvas for rendering, set drawingbuffer size
    const canvas = document.createElement("canvas");
    canvas.width = canvSize;
    canvas.height = canvSize;

    // Initialize rendering context and save default styles
    const ctx = canvas.getContext("2d");
    ctx.save();

    // Initialize roller and brush, to paint single layers onto the canvas
    const roller = initRoller(ctx);
    const brush = initBrush(ctx);
    // Initialize labeler: draws text labels and "sprite" icons
    const labeler = initLabeler(ctx, sprite);

    // Sort styles into groups
    const styles = {};
    styleGroups.forEach( group => {
      styles[group.name] = sortStyleGroup(styleLayers, group.name);
    });

    var getLamina, composite;
    if (styleGroups.length > 1) { 
      // Define function to return the appropriate lamina (partial rendering)
      getLamina = (tile, groupName) => tile.laminae[groupName];
      // Define function to composite all laminae canvases into the main canvas
      composite = (tile) => {
        tile.ctx.clearRect(0, 0, canvSize, canvSize);
        styleGroups.forEach( group => {
          if (!group.visible) return;
          tile.ctx.drawImage(tile.laminae[group.name].img, 0, 0);
        });
        tile.rendered = true;
      };
    } else {
      // Only one group of style layers. Render directly to the main canvas
      getLamina = (tile, groupName) => tile;
      // Compositing is not needed: return a dummy no-op function
      composite = (tile) => true;
    }

    return {
      drawGroup,
      composite,
      canvas,
    };

    function drawGroup(tile, groupName = "none", callback = () => undefined) {
      if (!styles[groupName]) return callback(null, tile);

      // Clear context and bounding boxes
      ctx.clearRect(0, 0, canvSize, canvSize);
      labeler.clearBoxes();

      // Draw the layers
      styles[groupName].forEach( style => drawLayer(style, tile.z, tile.sources) );

      // Copy the rendered image to the tile
      let lamina = getLamina(tile, groupName);
      lamina.ctx.clearRect(0, 0, canvSize, canvSize);
      lamina.ctx.drawImage(canvas, 0, 0);
      
      lamina.rendered = true;
      return callback(null, tile);
    }

    function drawLayer(style, zoom, sources) {
      // Quick exits if this layer is not meant to be displayed
      if (style.layout && style.layout["visibility"] === "none") return;
      if (style.minzoom !== undefined && zoom < style.minzoom) return;
      if (style.maxzoom !== undefined && zoom > style.maxzoom) return;

      // Start from default canvas state: restore what we saved
      ctx.restore();
      // restore POPS the saved state off a stack. So if we want to restore again
      // later, we need to re-save what we just restored
      ctx.save();

      if (style.type === "background") return roller.fillBackground(style, zoom);

      var source = sources[ style["source"] ];
      if (style.type === "raster") return roller.drawRaster(style, zoom, source);

      var mapLayer = source[ style["source-layer"] ];
      var mapData = getFeatures(mapLayer, style.filter);
      if (!mapData) return;

      return (style.type === "symbol") 
        ? labeler.draw(style, zoom, mapData)
        : brush(style, zoom, mapData);
    }
  }

  function sortStyleGroup(layers, groupName) {
    // Get the layers belonging to this group
    var group = (groupName === "none")
      ? layers.filter(layer => !layer["tilekiln-group"]) // Layers with no group specified
      : layers.filter(layer => layer["tilekiln-group"] === groupName);

    // Reverse the order of the symbol layers
    var labels = group.filter(layer => layer.type === "symbol").reverse();

    // Append reordered symbol layers to non-symbol layers
    return group.filter(layer => layer.type !== "symbol").concat(labels);
  }

  function init(params) {
    // Process parameters, substituting defaults as needed
    var canvSize = params.size || 512;
    var styleURL = params.style;   // REQUIRED
    var mbToken  = params.token;   // May be undefined
    var callback = params.callback || ( () => undefined );

    // Declare some variables & methods that will be defined inside a callback
    var groupNames, tileFactory, renderer, t1, t2;
    var styleGroups = [];

    function setGroupVisibility(name, visibility) {
      var group = styleGroups.find(group => group.name === name);
      if (group) group.visible = visibility;
    }

    const api = { // Initialize properties, update when styles load
      style: {},    // WARNING: directly modifiable from calling program
      create: () => undefined,
      drawGroup: (group) => undefined,
      hideGroup: (name) => setGroupVisibility(name, false),
      showGroup: (name) => setGroupVisibility(name, true),
      composite: () => undefined,
      redraw: () => undefined,
      groups: [],
      ready: false,
    };

    // Get the style info
    loadStyle(styleURL, mbToken, setup);

    return api;

    function setup(err, styleDoc) {
      if (err) callback(err);

      // Get layer group names from styleDoc
      groupNames = styleDoc.layers
        .map( layer => layer["tilekiln-group"] || "none" )
        .filter(uniq);

      // Make sure the groups in order, not interleaved
      var groupCheck = groupNames.slice().sort().filter(uniq);
      if (groupNames.length !== groupCheck.length) {
        err = "tilekiln setup: Input layer groups are not in order!";
        return callback(err);
      }
      
      function uniq(x, i, a) {
        return ( !i || x !== a[i-1] ); // x is not a repeat of the previous value
      }

      // Construct an object to track visibility of each group
      styleGroups = groupNames.map( name => {
        return { name, visible: true };
      });

      tileFactory = initTileFactory(canvSize, styleDoc.sources, styleGroups);
      renderer = initRenderer(canvSize, styleDoc.layers, styleGroups, styleDoc.sprite);

      // Update api
      // TODO: we could initialize renderer without styles, then send it the
      // styles when ready. This could avoid the need to rewrite the API.
      api.style = styleDoc;
      api.create = create;
      api.drawGroup = renderer.drawGroup;
      api.composite = renderer.composite;
      api.redraw = drawAll;
      api.ready = true;
      api.groups = groupNames;

      return callback(null, api);
    }

    function create(z, x, y, cb = () => undefined, reportTime) {
      var tile = tileFactory(z, x, y, render);
      function render(err) {
        if (err) cb(err);
        if (reportTime) t1 = performance.now();
        drawAll(tile);
        if (!reportTime) return cb(null, tile);
        t2 = performance.now();
        return cb(null, tile, t2 - t1);
      }
      return tile;
    }

    function drawAll(tile, callback = () => true) {
      styleGroups.forEach( group => renderer.drawGroup(tile, group.name) );
      renderer.composite(tile);
      callback(null, tile);
    }
  }

  function initCursor() {
    // What does an animation need to know about the cursor at each frame?
    // First, whether the user did any of the following since the last frame:
    //  - Started new actions
    var touchStarted = false; // Touched or clicked the element
    var zoomStarted  = false; // Rotated mousewheel, or started two-finger touch
    //  - Changed something
    var moved  = false;       // Moved mouse or touch point
    var zoomed = false;       // Rotated mousewheel, or adjusted two-finger touch
    //  - Ended actions
    var touchEnded = false;   // mouseup or touchend/cancel/leave

    // We also need to know the current cursor position and zoom scale
    var cursorX = 0;
    var cursorY = 0;
    var zscale = 1.0;

    return {
      // Methods to report local state. These protect local values, returning a copy
      touchStarted: () => touchStarted,
      zoomStarted:  () => zoomStarted,
      moved:        () => moved,
      zoomed:       () => zoomed,
      touchEnded:   () => touchEnded,
      hasChanged:   () => (moved || zoomed),
      zscale:       () => zscale,
      x: () => cursorX,
      y: () => cursorY,

      // Methods to update local state
      startTouch,
      startZoom,
      move,
      zoom,
      endTouch,
      reset,
    };

    function startTouch(evnt) {
      cursorX = evnt.clientX;
      cursorY = evnt.clientY;
      touchStarted = true;
    }

    function startZoom(evnt) {
      // Store the cursor position
      cursorX = evnt.clientX;
      cursorY = evnt.clientY;
      zoomStarted = true;
    }

    function move(evnt) {
      cursorX = evnt.clientX;
      cursorY = evnt.clientY;
      moved = true;
    }

    function zoom(scale) {
      zscale *= scale;
      zoomed = true;
    }

    function endTouch() {
      if (touchStarted) {
        // Ending a new touch? Just ignore both
        touchStarted = false;
        touchEnded = false;
      } else {
        touchEnded = true;
      }
    }

    function reset() {
      touchStarted = false;
      zoomStarted  = false;
      moved  = false;
      zoomed = false;
      touchEnded = false;
      zscale = 1.0;
    }
  }

  // Add event listeners to update the state of a cursor object
  // Input div is an HTML element on which events will be registered
  function initTouchy(div) {
    const cursor = initCursor();

    // Remember the distance between two pointers
    var lastDistance = 1.0;
    
    // Capture the drag event so we can disable any default actions
    div.addEventListener('dragstart', function(drag) {
      drag.preventDefault();
      return false;
    }, false);

    // Add mouse events
    div.addEventListener('mousedown',   cursor.startTouch, false);
    div.addEventListener('mousemove',   cursor.move,       false);
    div.addEventListener('mouseup',     cursor.endTouch,   false);
    div.addEventListener('mouseleave',  cursor.endTouch,   false);
    div.addEventListener('wheel',       wheelZoom,         false);

    // Add touch events
    div.addEventListener('touchstart',  initTouch,       false);
    div.addEventListener('touchmove',   moveTouch,       false);
    div.addEventListener('touchend',    cursor.endTouch, false);
    div.addEventListener('touchcancel', cursor.endTouch, false);

    // Return a pointer to the cursor object
    return cursor;

    function initTouch(evnt) {
      evnt.preventDefault();
      switch (evnt.touches.length) {
        case 1: 
          cursor.startTouch(evnt.touches[0]);
          break;
        case 2:
          var midpoint = getMidPoint(evnt.touches[0], evnt.touches[1]);
          cursor.startTouch(midpoint);
          cursor.startZoom(midpoint);
          // Initialize the starting distance between touches
          lastDistance = midpoint.distance;
          break;
        default:
          cursor.endTouch(evnt);
      }
    }

    function moveTouch(evnt) {
      evnt.preventDefault();
      // NOTE: MDN says to add the touchmove handler within the touchstart handler
      // https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Using_Touch_Events
      switch (evnt.touches.length) {
        case 1:
          cursor.move(evnt.touches[0]);
          break;
        case 2:
          var midpoint = getMidPoint(evnt.touches[0], evnt.touches[1]);
          // Move the cursor to the midpoint
          cursor.move(midpoint);
          // Zoom based on the change in distance between the two touches
          cursor.zoom(lastDistance / midpoint.distance);
          // Remember the new touch distance
          lastDistance = midpoint.distance;
          break;
        default:
          return false;
      }
    }

    // Convert a two-touch event to a single event at the midpoint
    function getMidPoint(p0, p1) {
      var dx = p1.clientX - p0.clientX;
      var dy = p1.clientY - p0.clientY;
      return {
        clientX: p0.clientX + dx / 2,
        clientY: p0.clientY + dy / 2,
        distance: Math.sqrt(dx * dx + dy * dy),
      }
    }

    function wheelZoom(turn) {
      turn.preventDefault();
      cursor.startZoom(turn);
      // We ignore the dY from the browser, since it may be arbitrarily scaled
      // based on screen resolution or other factors. We keep only the sign.
      // See https://github.com/Leaflet/Leaflet/issues/4538
      var zoomScale = 1.0 + 0.2 * Math.sign(turn.deltaY);
      cursor.zoom(zoomScale);
    }
  }

  function findNearest(x, y, threshold, features) {
    var minDistance = Infinity;
    var minIndex = 0;

    features.forEach(checkDistance);

    function checkDistance(feature, index) {
      var p = feature.geometry.coordinates;
      var distance = Math.sqrt( (p[0] - x)**2 + (p[1] - y)**2 );
      if (distance < minDistance) {
        minDistance = distance;
        minIndex = index;
      }
    }

    return (minDistance <= threshold)
      ? features[minIndex]
      : {};
  }

  const tzxy = [7, 28, 52];

  function main() {
    // Initialize the display canvas and rendering context
    const display = initDisplay('map');

    // Set up mouse tracking
    const cursor = initTouchy(display.element); 

    // Get a link to the tile coordinates printout
    var title = document.getElementById("zxy");
    var linesVisible = true;
    var hillshadeVisible = true;
    var currentTile, nextTile;

    // Get a link to the feature info printout
    var info = document.getElementById("info");

    // Initialize tile factory
    const tileMaker = init({
      size: 512,
      style: "./wells_style.json", //"mapbox://styles/mapbox/streets-v8",
      token: "pk.eyJ1IjoiamhlbWJkIiwiYSI6ImNqcHpueHpyZjBlMjAzeG9kNG9oNzI2NTYifQ.K7fqhk2Z2YZ8NIV94M-5nA", 
      callback: setup,
    });

    // Get first tile, setup interaction
    function setup(err, api) {
      if (err) return console.log(err);
      initHandlers();
      update();
      requestAnimationFrame(checkRender);
    }

    function checkRender(time) {
      if (currentTile) {
        // Find the well nearest the cursor
        var box = display.element.getBoundingClientRect();
        var x = cursor.x() - box.left;
        var y = cursor.y() - box.top;
        var layers = currentTile.sources["wells"];
        var data = layers["TWDB_Groundwater_v2"];
        var feature = findNearest(x, y, 5, data.features);
        // Print to info div
        info.innerHTML = "<pre>" + JSON.stringify(feature, null, 2) + "</pre>";

        // Select this feature in the highlighted-well style
        var styles = tileMaker.style.layers;
        var highlighter = styles.find(layer => layer.id === "highlighted-well");

        if (feature && feature.properties) {
          highlighter.filter[2] = feature.properties.title.toString();
        }
        //tileMaker.redraw(currentTile);
        tileMaker.drawGroup(currentTile, "highlight");
        tileMaker.composite(currentTile);
        display.context.drawImage(currentTile.img, 0, 0);
      }

      requestAnimationFrame(checkRender);
    }

    function update() {
      nextTile = tileMaker.create(tzxy[0], tzxy[1], tzxy[2], displayTile);
    }
    function displayTile(err, tile) {
      if (err) return console.log(err);
      currentTile = nextTile;
      // Copy the renderer canvas onto our display canvas
      //display.context.drawImage(tile.img, 0, 0); // Move to animation loop
      title.innerHTML = "z/x/y = " + tzxy[0] + "/" + tzxy[1] + "/" + tzxy[2];
    }

    function toggleLines() {
      linesVisible = !linesVisible;
      var visText = (linesVisible)
        ? "visible"
        : "none";

      tileMaker.style.layers.forEach(setLineVisibility);

      tileMaker.redraw(currentTile, displayTile);

      function setLineVisibility(layer) {
        if (layer.type !== "line") return;
        layer.layout.visibility = visText;
      }
    }

    function toggleHillshade() {
      hillshadeVisible = !hillshadeVisible;
      var visText = (hillshadeVisible)
        ? "visible"
        : "none";

      tileMaker.style.layers.forEach(setHillshadeVisibility);

      tileMaker.redraw(currentTile, displayTile);

      function setHillshadeVisibility(layer) {
        if (layer["source-layer"] !== "hillshade") return;
        layer.layout.visibility = visText;
      }
    }

    function initHandlers() {
      const lineToggle = document.getElementById("toggleLines");
      lineToggle.addEventListener("click", toggleLines, false);

      const hillshadeToggle = document.getElementById("toggleHillshade");
      hillshadeToggle.addEventListener("click", toggleHillshade, false);

      const left = document.getElementById("left");
      const right = document.getElementById("right");
      const up = document.getElementById("up");
      const down = document.getElementById("down");
      const zoomIn = document.getElementById("zoomIn");
      const zoomOut = document.getElementById("zoomOut");

      left.addEventListener("click", function(click) {
        tzxy[1]--;
        update();
      }, false);
      right.addEventListener("click", function(click) {
        tzxy[1]++;
        update();
      }, false);
      up.addEventListener("click", function(click) {
        tzxy[2]--;
        update();
      }, false);
      down.addEventListener("click", function(click) {
        tzxy[2]++;
        update();
      }, false);
      zoomIn.addEventListener("click", function(click) {
        tzxy[0]++;
        tzxy[1] *= 2;
        tzxy[2] *= 2;
        update();
      }, false);
      zoomOut.addEventListener("click", function(click) {
        tzxy[0]--;
        tzxy[1] = Math.floor(tzxy[1] / 2);
        tzxy[2] = Math.floor(tzxy[2] / 2);
        update();
      }, false);
    }
  }

  exports.main = main;

  return exports;

}({}));
