var app = (function (exports) {
  'use strict';

  function initDisplay(divID) {
    // Input is the ID of an HTML <div> where everything will be displayed

    // Get the div itself
    var displayDiv = document.getElementById(divID);

    // Add the main canvas, which fills the whole display div
    var canvas = addChild( displayDiv, 'canvas', 'display-canvas');
    // Initialize the main rendering context
    var context = canvas.getContext("2d");

    // Set size of drawingbuffer
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;

    return {
      element: displayDiv,
      canvas,
      context,
    };
  }

  function addChild(parentElement, childType, cssClass) {
    var child = document.createElement(childType);
    child.classList.add(cssClass);
    parentElement.appendChild(child);
    return child;
  }

  // From mapbox-gl-js, style-spec/deref.js
  const refProperties = [
    'type', 
    'source', 
    'source-layer', 
    'minzoom', 
    'maxzoom', 
    'filter', 
    'layout'
  ];

  /**
   * Given an array of layers, some of which may contain `ref` properties
   * whose value is the `id` of another property, return a new array where
   * such layers have been augmented with the 'type', 'source', etc. properties
   * from the parent layer, and the `ref` property has been removed.
   *
   * The input is not modified. The output may contain references to portions
   * of the input.
   */
  function derefLayers(layers) {
    layers = layers.slice(); // ??? What are we trying to achieve here?

    const map = Object.create(null); // stackoverflow.com/a/21079232/10082269
    layers.forEach( layer => { map[layer.id] = layer; } );

    for (let i = 0; i < layers.length; i++) {
      if ('ref' in layers[i]) {
        layers[i] = deref(layers[i], map[layers[i].ref]);
      }
    }

    return layers;
  }

  function deref(layer, parent) {
    const result = {};

    for (const k in layer) {
      if (k !== 'ref') {
        result[k] = layer[k];
      }
    }

    refProperties.forEach((k) => {
      if (k in parent) {
        result[k] = parent[k];
      }
    });

    return result;
  }

  function expandStyleURL(url, token) {
    var prefix = /^mapbox:\/\/styles\//;
    if ( !url.match(prefix) ) return url;
    var apiRoot = "https://api.mapbox.com/styles/v1/";
    return url.replace(prefix, apiRoot) + "?access_token=" + token;
  }

  function expandSpriteURLs(url, token) {
    // Returns an array containing urls to .png and .json files
    var prefix = /^mapbox:\/\/sprites\//;
    if ( !url.match(prefix) ) return {
      image: url + ".png", 
      meta: url + ".json",
    };

    // We have a Mapbox custom url. Expand to an absolute URL, as per the spec
    var apiRoot = "https://api.mapbox.com/styles/v1/";
    url = url.replace(prefix, apiRoot) + "/sprite";
    var tokenString = "?access_token=" + token;
    return {
      image: url + ".png" + tokenString, 
      meta: url + ".json" + tokenString,
    };
  }

  function expandTileURL(url, token) {
    var prefix = /^mapbox:\/\//;
    if ( !url.match(prefix) ) return url;
    var apiRoot = "https://api.mapbox.com/v4/";
    return url.replace(prefix, apiRoot) + ".json?secure&access_token=" + token;
  }

  function getJSON(dataHref) {
    // Wrap the fetch API to force a rejected promise if response is not OK
    const checkResponse = (response) => (response.ok)
      ? response.json()
      : Promise.reject(response); // Can check .status on returned response

    return fetch(dataHref).then(checkResponse);
  }

  function getImage(href) {
    const errMsg = "ERROR in getImage for href " + href;
    const img = new Image();

    return new Promise( (resolve, reject) => {
      img.onerror = () => reject(errMsg);

      img.onload = () => (img.complete && img.naturalWidth !== 0)
          ? resolve(img)
          : reject(errMsg);

      img.crossOrigin = "anonymous";
      img.src = href;
    });
  }

  function buildFeatureFilter(filterObj) {
    // filterObj is a filter definition following the "deprecated" syntax:
    // https://docs.mapbox.com/mapbox-gl-js/style-spec/#other-filter
    if (!filterObj) return () => true;

    var type, key, vals;

    // If this is a combined filter, the vals are themselves filter definitions
    [type, ...vals] = filterObj;
    switch (type) {
      case "all": {
        let filters = vals.map(buildFeatureFilter);  // Iteratively recursive!
        return (d) => filters.every( filt => filt(d) );
      }
      case "any": {
        let filters = vals.map(buildFeatureFilter);
        return (d) => filters.some( filt => filt(d) );
      }
      case "none": {
        let filters = vals.map(buildFeatureFilter);
        return (d) => filters.every( filt => !filt(d) );
      }
    }

    [type, key, ...vals] = filterObj;
    var getVal = initFeatureValGetter(key);

    switch (type) {
      // Existential Filters
      case "has": 
        return d => !!getVal(d); // !! forces a Boolean return
      case "!has": 
        return d => !getVal(d);

      // Comparison Filters
      case "==": 
        return d => getVal(d) === vals[0];
      case "!=":
        return d => getVal(d) !== vals[0];
      case ">":
        return d => getVal(d) > vals[0];
      case ">=":
        return d => getVal(d) >= vals[0];
      case "<":
        return d => getVal(d) < vals[0];
      case "<=":
        return d => getVal(d) <= vals[0];

      // Set Membership Filters
      case "in" :
        return d => vals.includes( getVal(d) );
      case "!in" :
        return d => !vals.includes( getVal(d) );
      default:
        console.log("prepFilter: unknown filter type = " + filterObj[0]);
    }
    // No recognizable filter criteria. Return a filter that is always true
    return () => true;
  }

  function initFeatureValGetter(key) {
    switch (key) {
      case "$type":
        // NOTE: data includes MultiLineString, MultiPolygon, etc-NOT IN SPEC
        return f => {
          let t = f.geometry.type;
          if (t === "MultiPoint") return "Point";
          if (t === "MultiLineString") return "LineString";
          if (t === "MultiPolygon") return "Polygon";
          return t;
        };
      case "$id":
        return f => f.id;
      default:
        return f => f.properties[key];
    }
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var csscolorparser = createCommonjsModule(function (module, exports) {
  // (c) Dean McNamee <dean@gmail.com>, 2012.
  //
  // https://github.com/deanm/css-color-parser-js
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  // IN THE SOFTWARE.

  // http://www.w3.org/TR/css3-color/
  var kCSSColorTable = {
    "transparent": [0,0,0,0], "aliceblue": [240,248,255,1],
    "antiquewhite": [250,235,215,1], "aqua": [0,255,255,1],
    "aquamarine": [127,255,212,1], "azure": [240,255,255,1],
    "beige": [245,245,220,1], "bisque": [255,228,196,1],
    "black": [0,0,0,1], "blanchedalmond": [255,235,205,1],
    "blue": [0,0,255,1], "blueviolet": [138,43,226,1],
    "brown": [165,42,42,1], "burlywood": [222,184,135,1],
    "cadetblue": [95,158,160,1], "chartreuse": [127,255,0,1],
    "chocolate": [210,105,30,1], "coral": [255,127,80,1],
    "cornflowerblue": [100,149,237,1], "cornsilk": [255,248,220,1],
    "crimson": [220,20,60,1], "cyan": [0,255,255,1],
    "darkblue": [0,0,139,1], "darkcyan": [0,139,139,1],
    "darkgoldenrod": [184,134,11,1], "darkgray": [169,169,169,1],
    "darkgreen": [0,100,0,1], "darkgrey": [169,169,169,1],
    "darkkhaki": [189,183,107,1], "darkmagenta": [139,0,139,1],
    "darkolivegreen": [85,107,47,1], "darkorange": [255,140,0,1],
    "darkorchid": [153,50,204,1], "darkred": [139,0,0,1],
    "darksalmon": [233,150,122,1], "darkseagreen": [143,188,143,1],
    "darkslateblue": [72,61,139,1], "darkslategray": [47,79,79,1],
    "darkslategrey": [47,79,79,1], "darkturquoise": [0,206,209,1],
    "darkviolet": [148,0,211,1], "deeppink": [255,20,147,1],
    "deepskyblue": [0,191,255,1], "dimgray": [105,105,105,1],
    "dimgrey": [105,105,105,1], "dodgerblue": [30,144,255,1],
    "firebrick": [178,34,34,1], "floralwhite": [255,250,240,1],
    "forestgreen": [34,139,34,1], "fuchsia": [255,0,255,1],
    "gainsboro": [220,220,220,1], "ghostwhite": [248,248,255,1],
    "gold": [255,215,0,1], "goldenrod": [218,165,32,1],
    "gray": [128,128,128,1], "green": [0,128,0,1],
    "greenyellow": [173,255,47,1], "grey": [128,128,128,1],
    "honeydew": [240,255,240,1], "hotpink": [255,105,180,1],
    "indianred": [205,92,92,1], "indigo": [75,0,130,1],
    "ivory": [255,255,240,1], "khaki": [240,230,140,1],
    "lavender": [230,230,250,1], "lavenderblush": [255,240,245,1],
    "lawngreen": [124,252,0,1], "lemonchiffon": [255,250,205,1],
    "lightblue": [173,216,230,1], "lightcoral": [240,128,128,1],
    "lightcyan": [224,255,255,1], "lightgoldenrodyellow": [250,250,210,1],
    "lightgray": [211,211,211,1], "lightgreen": [144,238,144,1],
    "lightgrey": [211,211,211,1], "lightpink": [255,182,193,1],
    "lightsalmon": [255,160,122,1], "lightseagreen": [32,178,170,1],
    "lightskyblue": [135,206,250,1], "lightslategray": [119,136,153,1],
    "lightslategrey": [119,136,153,1], "lightsteelblue": [176,196,222,1],
    "lightyellow": [255,255,224,1], "lime": [0,255,0,1],
    "limegreen": [50,205,50,1], "linen": [250,240,230,1],
    "magenta": [255,0,255,1], "maroon": [128,0,0,1],
    "mediumaquamarine": [102,205,170,1], "mediumblue": [0,0,205,1],
    "mediumorchid": [186,85,211,1], "mediumpurple": [147,112,219,1],
    "mediumseagreen": [60,179,113,1], "mediumslateblue": [123,104,238,1],
    "mediumspringgreen": [0,250,154,1], "mediumturquoise": [72,209,204,1],
    "mediumvioletred": [199,21,133,1], "midnightblue": [25,25,112,1],
    "mintcream": [245,255,250,1], "mistyrose": [255,228,225,1],
    "moccasin": [255,228,181,1], "navajowhite": [255,222,173,1],
    "navy": [0,0,128,1], "oldlace": [253,245,230,1],
    "olive": [128,128,0,1], "olivedrab": [107,142,35,1],
    "orange": [255,165,0,1], "orangered": [255,69,0,1],
    "orchid": [218,112,214,1], "palegoldenrod": [238,232,170,1],
    "palegreen": [152,251,152,1], "paleturquoise": [175,238,238,1],
    "palevioletred": [219,112,147,1], "papayawhip": [255,239,213,1],
    "peachpuff": [255,218,185,1], "peru": [205,133,63,1],
    "pink": [255,192,203,1], "plum": [221,160,221,1],
    "powderblue": [176,224,230,1], "purple": [128,0,128,1],
    "rebeccapurple": [102,51,153,1],
    "red": [255,0,0,1], "rosybrown": [188,143,143,1],
    "royalblue": [65,105,225,1], "saddlebrown": [139,69,19,1],
    "salmon": [250,128,114,1], "sandybrown": [244,164,96,1],
    "seagreen": [46,139,87,1], "seashell": [255,245,238,1],
    "sienna": [160,82,45,1], "silver": [192,192,192,1],
    "skyblue": [135,206,235,1], "slateblue": [106,90,205,1],
    "slategray": [112,128,144,1], "slategrey": [112,128,144,1],
    "snow": [255,250,250,1], "springgreen": [0,255,127,1],
    "steelblue": [70,130,180,1], "tan": [210,180,140,1],
    "teal": [0,128,128,1], "thistle": [216,191,216,1],
    "tomato": [255,99,71,1], "turquoise": [64,224,208,1],
    "violet": [238,130,238,1], "wheat": [245,222,179,1],
    "white": [255,255,255,1], "whitesmoke": [245,245,245,1],
    "yellow": [255,255,0,1], "yellowgreen": [154,205,50,1]};

  function clamp_css_byte(i) {  // Clamp to integer 0 .. 255.
    i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
    return i < 0 ? 0 : i > 255 ? 255 : i;
  }

  function clamp_css_float(f) {  // Clamp to float 0.0 .. 1.0.
    return f < 0 ? 0 : f > 1 ? 1 : f;
  }

  function parse_css_int(str) {  // int or percentage.
    if (str[str.length - 1] === '%')
      return clamp_css_byte(parseFloat(str) / 100 * 255);
    return clamp_css_byte(parseInt(str));
  }

  function parse_css_float(str) {  // float or percentage.
    if (str[str.length - 1] === '%')
      return clamp_css_float(parseFloat(str) / 100);
    return clamp_css_float(parseFloat(str));
  }

  function css_hue_to_rgb(m1, m2, h) {
    if (h < 0) h += 1;
    else if (h > 1) h -= 1;

    if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;
    if (h * 2 < 1) return m2;
    if (h * 3 < 2) return m1 + (m2 - m1) * (2/3 - h) * 6;
    return m1;
  }

  function parseCSSColor(css_str) {
    // Remove all whitespace, not compliant, but should just be more accepting.
    var str = css_str.replace(/ /g, '').toLowerCase();

    // Color keywords (and transparent) lookup.
    if (str in kCSSColorTable) return kCSSColorTable[str].slice();  // dup.

    // #abc and #abc123 syntax.
    if (str[0] === '#') {
      if (str.length === 4) {
        var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
        if (!(iv >= 0 && iv <= 0xfff)) return null;  // Covers NaN.
        return [((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
                (iv & 0xf0) | ((iv & 0xf0) >> 4),
                (iv & 0xf) | ((iv & 0xf) << 4),
                1];
      } else if (str.length === 7) {
        var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
        if (!(iv >= 0 && iv <= 0xffffff)) return null;  // Covers NaN.
        return [(iv & 0xff0000) >> 16,
                (iv & 0xff00) >> 8,
                iv & 0xff,
                1];
      }

      return null;
    }

    var op = str.indexOf('('), ep = str.indexOf(')');
    if (op !== -1 && ep + 1 === str.length) {
      var fname = str.substr(0, op);
      var params = str.substr(op+1, ep-(op+1)).split(',');
      var alpha = 1;  // To allow case fallthrough.
      switch (fname) {
        case 'rgba':
          if (params.length !== 4) return null;
          alpha = parse_css_float(params.pop());
          // Fall through.
        case 'rgb':
          if (params.length !== 3) return null;
          return [parse_css_int(params[0]),
                  parse_css_int(params[1]),
                  parse_css_int(params[2]),
                  alpha];
        case 'hsla':
          if (params.length !== 4) return null;
          alpha = parse_css_float(params.pop());
          // Fall through.
        case 'hsl':
          if (params.length !== 3) return null;
          var h = (((parseFloat(params[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
          // NOTE(deanm): According to the CSS spec s/l should only be
          // percentages, but we don't bother and let float or percentage.
          var s = parse_css_float(params[1]);
          var l = parse_css_float(params[2]);
          var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
          var m1 = l * 2 - m2;
          return [clamp_css_byte(css_hue_to_rgb(m1, m2, h+1/3) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h-1/3) * 255),
                  alpha];
        default:
          return null;
      }
    }

    return null;
  }

  try { exports.parseCSSColor = parseCSSColor; } catch(e) { }
  });
  var csscolorparser_1 = csscolorparser.parseCSSColor;

  function buildInterpFunc(base, sampleVal) {
    // Return a function to interpolate the value of y(x), given endpoints
    // p0 = (x0, y0) and p2 = (x1, y1)

    const scale = getScale(base);
    const interpolate = getInterpolator(sampleVal);

    return (p0, x, p1) => interpolate( p0[1], scale(p0[0], x, p1[0]), p1[1] );
  }

  function getScale(base) {
    // Return a function to find the relative position of x between a and b

    // Exponential scale follows mapbox-gl-js, style-spec/function/index.js
    // NOTE: https://github.com/mapbox/mapbox-gl-js/issues/2698 not addressed!
    const scale = (base === 1)
      ? (a, x, b) => (x - a) / (b - a)  // Linear scale
      : (a, x, b) => (Math.pow(base, x - a) - 1) / (Math.pow(base, b - a) - 1);

    // Add check for zero range
    return (a, x, b) => (a === b)
      ? 0
      : scale(a, x, b);
  }

  function getInterpolator(sampleVal) {
    // Return a function to find an interpolated value between end values v1, v2,
    // given relative position t between the two end positions

    var type = typeof sampleVal;
    if (type === "string" && csscolorparser_1(sampleVal)) type = "color";

    switch (type) {
      case "number": // Linear interpolator
        return (v1, t, v2) => v1 + t * (v2 - v1);

      case "color":  // Interpolate RGBA
        return (v1, t, v2) => 
          interpColor( csscolorparser_1(v1), t, csscolorparser_1(v2) );

      default:       // Assume step function
        return (v1, t, v2) => v1;
    }
  }

  function interpColor(c0, t, c1) {
    // Inputs c0, c1 are 4-element RGBA arrays as returned by parseCSSColor
    let c = c0.map( (c0_i, i) => c0_i + t * (c1[i] - c0_i) );

    return "rgba(" +
      Math.round(c[0]) + ", " +
      Math.round(c[1]) + ", " + 
      Math.round(c[2]) + ", " +
      c[3] + ")";
  }

  function autoGetters(properties = {}, defaults) {
    const getters = {};
    Object.keys(defaults).forEach(key => {
      getters[key] = buildStyleFunc(properties[key], defaults[key]);
    });
    return getters;
  }

  function buildStyleFunc(style, defaultVal) {
    var styleFunc, getArg;

    if (style === undefined) {
      styleFunc = () => defaultVal;
      styleFunc.type = "constant";

    } else if (typeof style !== "object" || Array.isArray(style)) {
      styleFunc = () => style;
      styleFunc.type = "constant";

    } else if (!style.property || style.property === "zoom") {
      getArg = (zoom, feature) => zoom;
      styleFunc = getStyleFunc(style, getArg);
      styleFunc.type = "zoom";

    } else {
      getArg = (zoom, feature) => feature.properties[style.property];
      styleFunc = getStyleFunc(style, getArg);
      styleFunc.type = "property";

    } // NOT IMPLEMENTED: zoom-and-property functions

    return styleFunc;
  }

  function getStyleFunc(style, getArg) {
    if (style.type === "identity") return getArg;

    // We should be building a stop function now. Make sure we have enough info
    var stops = style.stops;
    if (!stops || stops.length < 2 || stops[0].length !== 2) {
      console.log("buildStyleFunc: style = " + JSON.stringify(style));
      console.log("ERROR in buildStyleFunc: failed to understand style!");
      return;
    }

    var stopFunc = buildStopFunc(stops, style.base);
    return (zoom, feature) => stopFunc( getArg(zoom, feature) );
  }

  function buildStopFunc(stops, base = 1) {
    const izm = stops.length - 1;
    const interpolateVal = buildInterpFunc(base, stops[0][1]);

    return function(x) {
      let iz = stops.findIndex(stop => stop[0] > x);

      if (iz === 0) return stops[0][1]; // x is below first stop
      if (iz < 0) return stops[izm][1]; // x is above last stop

      return interpolateVal(stops[iz-1], x, stops[iz]);
    }
  }

  const layoutDefaults = {
    "background": {
      "visibility": "visible",
    },
    "fill": {
      "visibility": "visible",
    },
    "line": {
      "visibility": "visible",
      "line-cap": "butt",
      "line-join": "miter",
      "line-miter-limit": 2,
      "line-round-limit": 1.05,
    },
    "symbol": {
      "visibility": "visible",

      "symbol-placement": "point",
      "symbol-spacing": 250,
      "symbol-avoid-edges": false,
      "symbol-sort-key": undefined,
      "symbol-z-order": "auto",

      "icon-allow-overlap": false,
      "icon-ignore-placement": false,
      "icon-optional": false,
      "icon-rotation-alignment": "auto",
      "icon-size": 1,
      "icon-text-fit": "none",
      "icon-text-fit-padding": [0, 0, 0, 0],
      "icon-image": undefined,
      "icon-rotate": 0,
      "icon-padding": 2,
      "icon-keep-upright": false,
      "icon-offset": [0, 0],
      "icon-anchor": "center",
      "icon-pitch-alignment": "auto",

      "text-pitch-alignment": "auto",
      "text-rotation-alignment": "auto",
      "text-field": "",
      "text-font": ["Open Sans Regular", "Arial Unicode MS Regular"],
      "text-size": 16,
      "text-max-width": 10,
      "text-line-height": 1.2,
      "text-letter-spacing": 0,
      "text-justify": "center",
      "text-radial-offset": 0,
      "text-variable-anchor": undefined,
      "text-anchor": "center",
      "text-max-angle": 45,
      "text-rotate": 0,
      "text-padding": 2.0,
      "text-keep-upright": true,
      "text-transform": "none",
      "text-offset": [0, 0],
      "text-allow-overlap": false,
      "text-ignore-placement": false,
      "text-optional": false,
    },
    "raster": {
      "visibility": "visible",
    },
    "circle": {
      "visibility": "visible",
    },
    "fill-extrusion": {
      "visibility": "visible",
    },
    "heatmap": {
      "visibility": "visible",
    },
    "hillshade": {
      "visibility": "visible",
    },
  };

  const paintDefaults = {
    "background": {
      "background-color": "#000000",
      "background-opacity": 1,
      "background-pattern": undefined,
    },
    "fill": {
      "fill-antialias": true,
      "fill-opacity": 1,
      "fill-color": "#000000",
      "fill-outline-color": undefined,
      "fill-outline-width": 1, // non-standard!
      "fill-translate": [0, 0],
      "fill-translate-anchor": "map",
      "fill-pattern": undefined,
    },
    "line": {
      "line-opacity": 1,
      "line-color": "#000000",
      "line-translate": [0, 0],
      "line-translate-anchor": "map",
      "line-width": 1,
      "line-gap-width": 0,
      "line-offset": 0,
      "line-blur": 0,
      "line-dasharray": undefined,
      "line-pattern": undefined,
      "line-gradient": undefined,
    },
    "symbol": {
      "icon-opacity": 1,
      "icon-color": "#000000",
      "icon-halo-color": "rgba(0, 0, 0, 0)",
      "icon-halo-width": 0,
      "icon-halo-blur": 0,
      "icon-translate": [0, 0],
      "icon-translate-anchor": "map",

      "text-opacity": 1,
      "text-color": "#000000",
      "text-halo-color": "rgba(0, 0, 0, 0)",
      "text-halo-width": 0,
      "text-halo-blur": 0,
      "text-translate": [0, 0],
      "text-translate-anchor": "map",
    },
    "raster": {
      "raster-opacity": 1,
      "raster-hue-rotate": 0,
      "raster-brighness-min": 0,
      "raster-brightness-max": 1,
      "raster-saturation": 0,
      "raster-contrast": 0,
      "raster-resampling": "linear",
      "raster-fade-duration": 300,
    },
    "circle": {
      "circle-radius": 5,
      "circle-color": "#000000",
      "circle-blur": 0,
      "circle-opacity": 1,
      "circle-translate": [0, 0],
      "circle-translate-anchor": "map",
      "circle-pitch-scale": "map",
      "circle-pitch-alignment": "viewport",
      "circle-stroke-width": 0,
      "circle-stroke-color": "#000000",
      "circle-stroke-opacity": 1,
    },
    "fill-extrusion": {
      "fill-extrusion-opacity": 1,
      "fill-extrusion-color": "#000000",
      "fill-extrusion-translate": [0, 0],
      "fill-extrusion-translate-anchor": "map",
      "fill-extrusion-height": 0,
      "fill-extrusion-base": 0,
      "fill-extrusion-vertical-gradient": true,
    },
    "heatmap": {
      "heatmap-radius": 30,
      "heatmap-weight": 1,
      "heatmap-intensity": 1,
      "heatmap-color": ["interpolate",["linear"],["heatmap-density"],0,"rgba(0, 0, 255,0)",0.1,"royalblue",0.3,"cyan",0.5,"lime",0.7,"yellow",1,"red"],
      "heatmap-opacity": 1,
    },
    "hillshade": {
      "hillshade-illumination-direction": 335,
      "hillshade-illumination-anchor": "viewport",
      "hillshade-exaggeration": 0.5,
      "hillshade-shadow-color": "#000000",
      "hillshade-highlight-color": "#FFFFFF",
      "hillshade-accent-color": "#000000",
    },
  };

  function parseLayer(inputLayer) {
    // Make a shallow copy of the layer, to leave the input unchanged
    const layer = Object.assign({}, inputLayer);

    // Replace filter and rendering properties with functions
    layer.filter = buildFeatureFilter(layer.filter);
    layer.layout = autoGetters(layer.layout, layoutDefaults[layer.type]);
    layer.paint  = autoGetters(layer.paint,  paintDefaults[layer.type] );

    return layer;
  }

  function parseStyle(style, mapboxToken) {
    // Get a Promise that resolves to a raw Mapbox style document
    const getStyleJson = (typeof style === "object")
      ? Promise.resolve(style)                // style is JSON already
      : getJSON( expandStyleURL(style, mapboxToken) ); // Get from URL

    // Set up an asynchronous function to process the document
    function parseStyleJson(rawStyleDoc) {
      // Make a shallow copy of the document, to leave the input unchanged
      const styleDoc = Object.assign({}, rawStyleDoc);

      // Expand layer references, then parse
      styleDoc.layers = derefLayers(styleDoc.layers).map(parseLayer);

      // Get linked info for sources and sprites
      const sourcePromise = expandSources(styleDoc.sources, mapboxToken);
      const spritePromise = loadSprite(styleDoc.sprite, mapboxToken);

      return Promise.all([sourcePromise, spritePromise])
        .then( ([sources, spriteData]) => {
          styleDoc.sources = sources;
          styleDoc.spriteData = spriteData;
          return styleDoc;
        });
    }

    // Chain together and return
    return getStyleJson.then( parseStyleJson );
  }

  function expandSources(rawSources, token) {
    const expandPromises = Object.entries(rawSources).map(expandSource);

    function expandSource([key, rawSource]) {
      // Make a shallow copy of the input. Note: some properties may still be
      // pointing back to the original style document, like .vector_layers,
      // .bounds, .center, .extent
      const source = Object.assign({}, rawSource);

      if (source.url === undefined) return [key, source]; // No change

      // Load the referenced TileJSON document, and copy its values to source
      return getJSON( expandTileURL(source.url, token) )
        .then( tileJson => [key, Object.assign(source, tileJson)] );
    }

    function combineSources(keySourcePairs) {
      const sources = {};
      keySourcePairs.forEach( ([key, val]) => { sources[key] = val; } );
      return sources;
    }

    return Promise.all( expandPromises ).then( combineSources );
  }

  function loadSprite(sprite, token) {
    if (!sprite) return;

    const urls = expandSpriteURLs(sprite, token);

    return Promise.all([getImage(urls.image), getJSON(urls.meta)])
      .then( ([image, meta]) => ({ image, meta }) );
  }

  // Renders layers that cover the whole tile (like painting with a roller)

  function initBackgroundFill(layout, paint, canvSize) {
    return function(ctx, zoom) {
      ctx.fillStyle = paint["background-color"](zoom);
      ctx.globalAlpha = paint["background-opacity"](zoom);
      ctx.fillRect(0, 0, canvSize, canvSize);
    }
  }

  function initRasterFill(layout, paint, canvSize) {
    return function(ctx, zoom, image) {
      ctx.globalAlpha = paint["raster-opacity"](zoom);
      // TODO: we are forcing one tile to cover the canvas!
      // In some cases (e.g. Mapbox Satellite Streets) the raster tiles may
      // be half the size of the vector canvas, so we need 4 of them...
      ctx.drawImage(image, 0, 0, canvSize, canvSize);
    }
  }

  // Adds floating point numbers with twice the normal precision.
  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
  // 305–363 (1997).
  // Code adapted from GeographicLib by Charles F. F. Karney,
  // http://geographiclib.sourceforge.net/

  function adder() {
    return new Adder;
  }

  function Adder() {
    this.reset();
  }

  Adder.prototype = {
    constructor: Adder,
    reset: function() {
      this.s = // rounded value
      this.t = 0; // exact error
    },
    add: function(y) {
      add(temp, y, this.t);
      add(this, temp.s, this.s);
      if (this.s) this.t += temp.t;
      else this.s = temp.t;
    },
    valueOf: function() {
      return this.s;
    }
  };

  var temp = new Adder;

  function add(adder, a, b) {
    var x = adder.s = a + b,
        bv = x - a,
        av = x - bv;
    adder.t = (a - av) + (b - bv);
  }

  var pi = Math.PI;
  var tau = pi * 2;

  var abs = Math.abs;
  var sqrt = Math.sqrt;

  function noop() {}

  function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      streamGeometryType[geometry.type](geometry, stream);
    }
  }

  var streamObjectType = {
    Feature: function(object, stream) {
      streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function(object, stream) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) streamGeometry(features[i].geometry, stream);
    }
  };

  var streamGeometryType = {
    Sphere: function(object, stream) {
      stream.sphere();
    },
    Point: function(object, stream) {
      object = object.coordinates;
      stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
    },
    LineString: function(object, stream) {
      streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamLine(coordinates[i], stream, 0);
    },
    Polygon: function(object, stream) {
      streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function(object, stream) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) streamGeometry(geometries[i], stream);
    }
  };

  function streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    stream.lineEnd();
  }

  function streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while (++i < n) streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
  }

  function geoStream(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      streamObjectType[object.type](object, stream);
    } else {
      streamGeometry(object, stream);
    }
  }

  function identity(x) {
    return x;
  }

  var areaSum = adder(),
      areaRingSum = adder(),
      x00$2,
      y00$2,
      x0$3,
      y0$3;

  var areaStream = {
    point: noop,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: function() {
      areaStream.lineStart = areaRingStart;
      areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
      areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;
      areaSum.add(abs(areaRingSum));
      areaRingSum.reset();
    },
    result: function() {
      var area = areaSum / 2;
      areaSum.reset();
      return area;
    }
  };

  function areaRingStart() {
    areaStream.point = areaPointFirst;
  }

  function areaPointFirst(x, y) {
    areaStream.point = areaPoint;
    x00$2 = x0$3 = x, y00$2 = y0$3 = y;
  }

  function areaPoint(x, y) {
    areaRingSum.add(y0$3 * x - x0$3 * y);
    x0$3 = x, y0$3 = y;
  }

  function areaRingEnd() {
    areaPoint(x00$2, y00$2);
  }

  var pathArea = areaStream;

  var x0$2 = Infinity,
      y0$2 = x0$2,
      x1 = -x0$2,
      y1 = x1;

  var boundsStream = {
    point: boundsPoint,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: noop,
    polygonEnd: noop,
    result: function() {
      var bounds = [[x0$2, y0$2], [x1, y1]];
      x1 = y1 = -(y0$2 = x0$2 = Infinity);
      return bounds;
    }
  };

  function boundsPoint(x, y) {
    if (x < x0$2) x0$2 = x;
    if (x > x1) x1 = x;
    if (y < y0$2) y0$2 = y;
    if (y > y1) y1 = y;
  }

  var boundsStream$1 = boundsStream;

  // TODO Enforce positive area for exterior, negative area for interior?

  var X0 = 0,
      Y0 = 0,
      Z0 = 0,
      X1 = 0,
      Y1 = 0,
      Z1 = 0,
      X2 = 0,
      Y2 = 0,
      Z2 = 0,
      x00$1,
      y00$1,
      x0$1,
      y0$1;

  var centroidStream = {
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
      centroidStream.lineStart = centroidRingStart;
      centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
      centroidStream.point = centroidPoint;
      centroidStream.lineStart = centroidLineStart;
      centroidStream.lineEnd = centroidLineEnd;
    },
    result: function() {
      var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
          : Z1 ? [X1 / Z1, Y1 / Z1]
          : Z0 ? [X0 / Z0, Y0 / Z0]
          : [NaN, NaN];
      X0 = Y0 = Z0 =
      X1 = Y1 = Z1 =
      X2 = Y2 = Z2 = 0;
      return centroid;
    }
  };

  function centroidPoint(x, y) {
    X0 += x;
    Y0 += y;
    ++Z0;
  }

  function centroidLineStart() {
    centroidStream.point = centroidPointFirstLine;
  }

  function centroidPointFirstLine(x, y) {
    centroidStream.point = centroidPointLine;
    centroidPoint(x0$1 = x, y0$1 = y);
  }

  function centroidPointLine(x, y) {
    var dx = x - x0$1, dy = y - y0$1, z = sqrt(dx * dx + dy * dy);
    X1 += z * (x0$1 + x) / 2;
    Y1 += z * (y0$1 + y) / 2;
    Z1 += z;
    centroidPoint(x0$1 = x, y0$1 = y);
  }

  function centroidLineEnd() {
    centroidStream.point = centroidPoint;
  }

  function centroidRingStart() {
    centroidStream.point = centroidPointFirstRing;
  }

  function centroidRingEnd() {
    centroidPointRing(x00$1, y00$1);
  }

  function centroidPointFirstRing(x, y) {
    centroidStream.point = centroidPointRing;
    centroidPoint(x00$1 = x0$1 = x, y00$1 = y0$1 = y);
  }

  function centroidPointRing(x, y) {
    var dx = x - x0$1,
        dy = y - y0$1,
        z = sqrt(dx * dx + dy * dy);

    X1 += z * (x0$1 + x) / 2;
    Y1 += z * (y0$1 + y) / 2;
    Z1 += z;

    z = y0$1 * x - x0$1 * y;
    X2 += z * (x0$1 + x);
    Y2 += z * (y0$1 + y);
    Z2 += z * 3;
    centroidPoint(x0$1 = x, y0$1 = y);
  }

  var pathCentroid = centroidStream;

  function PathContext(context) {
    this._context = context;
  }

  PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function(_) {
      return this._radius = _, this;
    },
    polygonStart: function() {
      this._line = 0;
    },
    polygonEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line === 0) this._context.closePath();
      this._point = NaN;
    },
    point: function(x, y) {
      switch (this._point) {
        case 0: {
          this._context.moveTo(x, y);
          this._point = 1;
          break;
        }
        case 1: {
          this._context.lineTo(x, y);
          break;
        }
        default: {
          this._context.moveTo(x + this._radius, y);
          this._context.arc(x, y, this._radius, 0, tau);
          break;
        }
      }
    },
    result: noop
  };

  var lengthSum = adder(),
      lengthRing,
      x00,
      y00,
      x0,
      y0;

  var lengthStream = {
    point: noop,
    lineStart: function() {
      lengthStream.point = lengthPointFirst;
    },
    lineEnd: function() {
      if (lengthRing) lengthPoint(x00, y00);
      lengthStream.point = noop;
    },
    polygonStart: function() {
      lengthRing = true;
    },
    polygonEnd: function() {
      lengthRing = null;
    },
    result: function() {
      var length = +lengthSum;
      lengthSum.reset();
      return length;
    }
  };

  function lengthPointFirst(x, y) {
    lengthStream.point = lengthPoint;
    x00 = x0 = x, y00 = y0 = y;
  }

  function lengthPoint(x, y) {
    x0 -= x, y0 -= y;
    lengthSum.add(sqrt(x0 * x0 + y0 * y0));
    x0 = x, y0 = y;
  }

  var pathMeasure = lengthStream;

  function PathString() {
    this._string = [];
  }

  PathString.prototype = {
    _radius: 4.5,
    _circle: circle(4.5),
    pointRadius: function(_) {
      if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
      return this;
    },
    polygonStart: function() {
      this._line = 0;
    },
    polygonEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line === 0) this._string.push("Z");
      this._point = NaN;
    },
    point: function(x, y) {
      switch (this._point) {
        case 0: {
          this._string.push("M", x, ",", y);
          this._point = 1;
          break;
        }
        case 1: {
          this._string.push("L", x, ",", y);
          break;
        }
        default: {
          if (this._circle == null) this._circle = circle(this._radius);
          this._string.push("M", x, ",", y, this._circle);
          break;
        }
      }
    },
    result: function() {
      if (this._string.length) {
        var result = this._string.join("");
        this._string = [];
        return result;
      } else {
        return null;
      }
    }
  };

  function circle(radius) {
    return "m0," + radius
        + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
        + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
        + "z";
  }

  function index(projection, context) {
    var pointRadius = 4.5,
        projectionStream,
        contextStream;

    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        geoStream(object, projectionStream(contextStream));
      }
      return contextStream.result();
    }

    path.area = function(object) {
      geoStream(object, projectionStream(pathArea));
      return pathArea.result();
    };

    path.measure = function(object) {
      geoStream(object, projectionStream(pathMeasure));
      return pathMeasure.result();
    };

    path.bounds = function(object) {
      geoStream(object, projectionStream(boundsStream$1));
      return boundsStream$1.result();
    };

    path.centroid = function(object) {
      geoStream(object, projectionStream(pathCentroid));
      return pathCentroid.result();
    };

    path.projection = function(_) {
      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
    };

    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return path;
    };

    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };

    return path.projection(projection).context(context);
  }

  function initBrush({ setters, methods }) {
    const dataFuncs = setters.filter(s => s.getStyle.type === "property");
    const zoomFuncs = setters.filter(s => s.getStyle.type !== "property");

    // Choose draw function based on whether styles are data-dependent
    const draw = (dataFuncs.length > 0)
      ? dataDependentDraw
      : constantDraw;

    return function(ctx, zoom, data) {
      const path = index(null, ctx);

      // Set the non-data-dependent state
      zoomFuncs.forEach(f => f.setState(f.getStyle(zoom), ctx, path));

      // Draw everything and return
      return draw(ctx, path, zoom, data);
    }

    function dataDependentDraw(ctx, path, zoom, data) {
      const features = addStylesToFeatures(dataFuncs, zoom, data);

      // Draw features, updating canvas state as data-dependent styles change
      let numFeatures = features.length;
      let i = 0;
      while (i < numFeatures) {
        // Set state based on the styles of the current feature
        let styles = features[i].styles;
        dataFuncs.forEach( (f, j) => f.setState(styles[j], ctx, path) );

        ctx.beginPath();
        // Add features to the path, until the styles change
        let id = features[i].styleID;
        while (i < numFeatures && features[i].styleID === id) {
          path(features[i]);
          i++;
        }

        // Render the current path
        methods.forEach(method => ctx[method]());
      }
    }

    function constantDraw(ctx, path, zoom, data) {
      // Draw all the data with the current canvas state
      ctx.beginPath();
      path(data);
      methods.forEach(method => ctx[method]());
    }
  }

  function addStylesToFeatures(propFuncs, zoom, data) {
    // Build an array of features, adding style values and a sortable id
    // WARNING: modifies the features in the original data object!
    let styledFeatures = data.features.map(feature => {
      feature.styles = propFuncs.map(f => f.getStyle(zoom, feature));
      feature.styleID = feature.styles.join("|");
      return feature;
    });

    // Sort the array, to collect features with the same styling
    return styledFeatures.sort( (a, b) => (a.styleID < b.styleID) ? -1 : 1 );
  }

  function canv(property) {
    // Create a default state setter for a Canvas 2D renderer
    return (val, ctx) => { ctx[property] = val; };
  }

  function pair(getStyle, setState) {
    // Return a style value getter and a renderer state setter as a paired object
    return { getStyle, setState };
  }

  function makePatternSetter(sprite) {
    return function(spriteID, ctx) {
      const sMeta = sprite.meta[spriteID];
      const patternCanvas = document.createElement("canvas");
      patternCanvas.width = sMeta.width;
      patternCanvas.height = sMeta.height;
      const pCtx = patternCanvas.getContext("2d");
      pCtx.drawImage(
        sprite.image, 
        sMeta.x, 
        sMeta.y, 
        sMeta.width, 
        sMeta.height,
        0,
        0,
        sMeta.width,
        sMeta.height
      );
      ctx.fillStyle = ctx.createPattern(patternCanvas, "repeat");
    };
  }

  // Renders discrete lines, points, polygons... like painting with a brush

  function initCircle(layout, paint) {
    const setRadius = (radius, ctx, path) => {
      if (radius) path.pointRadius(radius);
    };
    const setters = [
      pair(paint["circle-radius"],  setRadius),
      pair(paint["circle-color"],   canv("fillStyle")),
      pair(paint["circle-opacity"], canv("globalAlpha")),
    ];
    const methods = ["fill"];

    return initBrush({ setters, methods });
  }

  function initLine(layout, paint) {
    const setters = [
      pair(layout["line-cap"],      canv("lineCap")),
      pair(layout["line-join"],     canv("lineJoin")),
      pair(layout["line-miter-limit"], canv("miterLimit")),
      // line-round-limit,

      pair(paint["line-width"],     canv("lineWidth")),
      pair(paint["line-opacity"],   canv("globalAlpha")),
      pair(paint["line-color"],     canv("strokeStyle")),
      // line-gap-width, 
      // line-translate, line-translate-anchor,
      // line-offset, line-blur, line-gradient, line-pattern, 
      // line-dasharray
    ];
    const methods = ["stroke"];

    return initBrush({ setters, methods });
  }

  function initFill(layout, paint, sprite) {
    var getStyle, setState;

    let pattern = paint["fill-pattern"];
    if (pattern.type !== "constant" || pattern() !== undefined) {
      // Fill with a repeated sprite. Style getter returns sprite name
      getStyle = pattern;
      setState = makePatternSetter(sprite);
    } else {
      // Fill with a solid color
      getStyle = paint["fill-color"];
      setState = canv("fillStyle");
    }

    const setters = [
      pair(getStyle, setState),
      pair(paint["fill-opacity"],   canv("globalAlpha")),
      // fill-translate, 
      // fill-translate-anchor,
    ];
    const methods = ["fill"];

    let outline = paint["fill-outline-color"];
    if (outline.type !== "constant" || outline() !== undefined) {
      setters.push(
        pair(paint["fill-outline-color"], canv("strokeStyle")),
        pair(paint["fill-outline-width"], canv("lineWidth")), // nonstandard
      );
      methods.push("stroke");
    }

    return initBrush({ setters, methods });
  }

  function getTokenParser(tokenText) {
    if (!tokenText) return () => undefined;
    const tokenPattern = /{([^{}]+)}/g;

    // We break tokenText into pieces that are either plain text or tokens,
    // then construct an array of functions to parse each piece
    var tokenFuncs = [];
    var charIndex  = 0;
    while (charIndex < tokenText.length) {
      // Find the next token
      let result = tokenPattern.exec(tokenText);

      if (!result) {
        // No tokens left. Parse the plain text after the last token
        let str = tokenText.substring(charIndex);
        tokenFuncs.push(props => str);
        break;
      } else if (result.index > charIndex) {
        // There is some plain text before the token
        let str = tokenText.substring(charIndex, result.index);
        tokenFuncs.push(props => str);
      }

      // Add a function to process the current token
      let token = result[1];
      tokenFuncs.push(props => props[token]);
      charIndex = tokenPattern.lastIndex;
    }
    
    // We now have an array of functions returning either a text string or
    // a feature property
    // Return a function that assembles everything
    return function(properties) {
      return tokenFuncs.reduce(concat, "");
      function concat(str, tokenFunc) {
        let text = tokenFunc(properties) || "";
        return str += text;
      }
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Common_weight_name_mapping
  // Some obscure names from https://css3-tutorial.net/text-font/font-weight/
  // But the 2 sources conflict!! The mapping is not standardized!
  const fontWeights = {
    "thin": 100,
    "hairline": 100,
    "extra-light": 200,
    "ultra-light": 200,
    "light": 300,
    "book": 300,
    "regular": 400,
    "normal": 400,
    "plain": 400,
    "roman": 400,
    "standard": 400,
    "medium": 500,
    "semi-bold": 600,
    "demi-bold": 600,
    "bold": 700,
    "extra-bold": 800,
    "ultra-bold": 800,
    "heavy": 900,
    "black": 900,
    "fat": 900,
    "poster": 900,
    "ultra-black": 950,
    "extra-black": 950,
    "heavy-black": 950,
  };
  const wNames = Object.keys(fontWeights);

  function popFontWeight(words, defaultWeight) {
    // Input words is an array of words from a font descriptor string, 
    // where the last word (or two) may contain font-weight info. 
    // Returns a numeric font-weight (if found), or defaultWeight
    // NOTES
    //  - ASSUMES font-style info (italics) has already been removed.
    //  - Input words array may be shortened!

    // If the last word is already a numeric weight, just remove and return it
    if (typeof words.slice(-1)[0] === "number") return words.pop();

    // Check if the last word matches one of the weight names in the dictionary
    var test = words.slice(-1)[0].toLowerCase();
    let wName = wNames.find(w => w == test || w.replace("-", "") == test);
    if (wName) {
      words.pop();
      return fontWeights[wName];
    }

    // Try again with the last 2 words
    test = words.slice(-2).join(" ").toLowerCase();
    wName = wNames.find(w => w.replace("-", " ") == test);
    if (wName) {
      words.pop();
      words.pop();
    }
    return fontWeights[wName] || defaultWeight;
  }

  const italicRE = /(italic|oblique)$/i;
  const fontCache = {};

  function getFontString(fonts, size, lineHeight) {
    // TODO: Need to pre-load all needed fonts, using FontFace API
    if (!Array.isArray(fonts)) fonts = [fonts];

    // Check if we already calculated the CSS for this font
    var cssData = fontCache[fonts.join(",")];
    if (cssData) return combine(cssData, size, lineHeight);

    var weight = 400;
    var style = 'normal';
    var fontFamilies = [];
    fonts.forEach(font => {
      var parts = font.split(' ');

      // Get font-style from end of string
      var maybeStyle = parts[parts.length - 1].toLowerCase();
      if (["normal", "italic", "oblique"].includes(maybeStyle)) {
        style = maybeStyle;
        parts.pop();
      } else if (italicRE.test(maybeStyle)) {
        // Style is part of the last word. Separate the parts
        // NOTE: haven't seen an example of this?
        // Idea from the mapbox-to-css module on NPM
        style = italicRE.exec(maybeStyle)[0];
        parts[parts.length - 1].replace(italicRE, '');
      }

      // Get font-weight
      weight = popFontWeight(parts, weight);

      // Get font-family
      // Special handling for Noto Sans, from mapbox-to-css module on NPM
      var fontFamily = parts.join(" ")
        .replace('Klokantech Noto Sans', 'Noto Sans');
      if (fontFamily.indexOf(" ") !== -1) { // Multi-word string. Wrap it in quotes
        fontFamily = '"' + fontFamily + '"';
      }
      fontFamilies.push(fontFamily);
    });

    fontFamilies.push("sans-serif"); // Last resort fallback

    // CSS font property: font-style font-weight font-size/line-height font-family
    cssData = fontCache[fonts.join(",")] = [style, weight, fontFamilies];

    return combine(cssData, size, lineHeight);
  }
  function combine(cssData, size, lineHeight) {
    // Round fontSize to the nearest 0.1 pixel
    size = Math.round(10.0 * size) * 0.1;

    // Combine with line height
    let sizes = (lineHeight) 
      ? size + "px/" + lineHeight 
      : size + "px";

    return [cssData[0], cssData[1], sizes, cssData[2]].join(" ");
  }

  function getTextShift(anchor) {
    // We use the Canvas 2D settings 
    //  textBaseline = "bottom", textAlign = "left"
    // and shift the text box based on the specified "text-anchor"
    // Returned values will be scaled by the text box dimensions
    switch (anchor) {
      case "top-left":
        return [ 0.0, 1.0];
      case "top-right":
        return [-1.0, 1.0];
      case "top":
        return [-0.5, 1.0];
      case "bottom-left":
        return [ 0.0, 0.0];
      case "bottom-right":
        return [-1.0, 0.0];
      case "bottom":
        return [-0.5, 0.0];
      case "left":
        return [ 0.0, 0.5];
      case "right":
        return [-1.0, 0.5];
      case "center":
      default:
        return [-0.5, 0.5];
    }
  }

  function getTextTransform(code) {
    switch (code) {
      case "uppercase":
        return f => f.toUpperCase();
      case "lowercase":
        return f => f.toLowerCase();
      case "none":
      default:
        return f => f;
    }
  }

  function initTextLabeler(ctx, zoom, layout, paint) {
    const textParser = getTokenParser( layout["text-field"](zoom) );

    const fontSize = layout["text-size"](zoom);
    const fontFace = layout["text-font"](zoom);
    const lineHeight = layout["text-line-height"](zoom);
    ctx.font = getFontString(fontFace, fontSize, lineHeight);

    const textPadding = layout["text-padding"](zoom);
    const textOffset = layout["text-offset"](zoom);

    ctx.textBaseline = "bottom";
    ctx.textAlign = "left";
    const posShift = getTextShift( layout["text-anchor"](zoom) );

    const transform = getTextTransform( layout["text-transform"](zoom) );

    const haloWidth = paint["text-halo-width"](zoom);
    if (haloWidth > 0) {
      ctx.lineWidth = haloWidth * 2.0;
      ctx.lineJoin = "round";
      ctx.strokeStyle = paint["text-halo-color"](zoom);
    }
    ctx.fillStyle = paint["text-color"](zoom);

    var labelText, labelLength, labelHeight, x, y;

    return { measure, draw };

    function measure(feature) {
      labelText = textParser(feature.properties);
      if (!labelText) return;

      labelText = transform(labelText);
      labelLength = ctx.measureText(labelText).width;
      labelHeight = fontSize * lineHeight;

      var coords = feature.geometry.coordinates;
      // Compute coordinates of bottom left corner of text
      x = coords[0] + textOffset[0] * fontSize + posShift[0] * labelLength;
      y = coords[1] + textOffset[1] * labelHeight + posShift[1] * labelHeight;

      // Return a bounding box object
      return [
        [x - textPadding, y - labelHeight - textPadding],
        [x + labelLength + textPadding, y + textPadding]
      ];
    }

    function draw() {
      if (!labelText) return;

      if (haloWidth > 0) ctx.strokeText(labelText, x, y);
      ctx.fillText(labelText, x, y);
    }
  }

  function initIconLabeler(ctx, zoom, layout, paint, sprite) {
    const getSpriteID = getTokenParser( layout["icon-image"](zoom) );
    const iconPadding = layout["icon-padding"](zoom);

    var spriteID, spriteMeta, x, y;

    return { measure, draw };

    function measure(feature) {
      spriteID = getSpriteID(feature.properties);
      if (!spriteID) return;

      spriteMeta = sprite.meta[spriteID];

      var coords = feature.geometry.coordinates;
      x = Math.round(coords[0] - spriteMeta.width / 2);
      y = Math.round(coords[1] - spriteMeta.height / 2);

      return [
        [x - iconPadding, y - iconPadding],
        [x + spriteMeta.width + iconPadding, y + spriteMeta.height + iconPadding]
      ];
    } 

    function draw() {
      if (!spriteID) return;

      ctx.drawImage(
        sprite.image,
        spriteMeta.x,
        spriteMeta.y,
        spriteMeta.width,
        spriteMeta.height,
        x,
        y,
        spriteMeta.width,
        spriteMeta.height
      );
    }
  }

  function initLabeler(layout, paint, sprite) {
    // Skip unsupported symbol types
    if (layout["symbol-placement"]() === "line") return () => undefined;

    return function(ctx, zoom, data, boxes) {
      const textLabeler = initTextLabeler(ctx, zoom, layout, paint);
      const iconLabeler = initIconLabeler(ctx, zoom, layout, paint, sprite);

      data.features.forEach(drawLabel);

      function drawLabel(feature) {
        var textBox = textLabeler.measure(feature);
        if ( collides(textBox) ) return;

        var iconBox = iconLabeler.measure(feature);
        if ( collides(iconBox) ) return;

        if (textBox) boxes.push(textBox);
        if (iconBox) boxes.push(iconBox);

        // Draw the labels
        iconLabeler.draw();
        textLabeler.draw();
      }

      function collides(newBox) {
        if (!newBox) return false;
        return boxes.some( box => intersects(box, newBox) );
      }
    }
  }

  function intersects(box1, box2) {
    // box[0] = [xmin, ymin]; box[1] = [xmax, ymax]
    if (box1[0][0] > box2[1][0]) return false;
    if (box2[0][0] > box1[1][0]) return false;
    if (box1[0][1] > box2[1][1]) return false;
    if (box2[0][1] > box1[1][1]) return false;

    return true;
  }

  function makePaintFunction(style, sprite, canvasSize) {
    switch (style.type) {
      case "background":
        return initBackgroundFill(style.layout, style.paint, canvasSize);
      case "raster":
        return initRasterFill(style.layout, style.paint, canvasSize);
      case "symbol":
        return initLabeler(style.layout, style.paint, sprite);
      case "circle":
        return initCircle(style.layout, style.paint);
      case "line":
        return initLine(style.layout, style.paint);
      case "fill":
        return initFill(style.layout, style.paint, sprite);
      case "fill-extrusion":
      case "heatmap":
      case "hillshade":
      default:
        return console.log("ERROR in initRenderer: layer.type = " +
          style.type + " not supported!");
    }
  }

  function makeDataGetter(style) {
    // Background layers don't need data
    if (style.type === "background") return () => true;

    // Store the source name, so we don't re-access the style object every time
    const sourceName = style["source"];
    // Raster layers don't specify a source-layer
    if (style.type === "raster") return (sources) => sources[sourceName];

    const layerName = style["source-layer"];
    const filter = style.filter;

    return function(sources) {
      let source = sources[sourceName];
      if (!source) return false;

      let layer = source[layerName];
      if (!layer) return false;

      let features = layer.features.filter(filter);
      if (features.length < 1) return false;

      return { type: "FeatureCollection", features: features };
    };
  }

  function initPainter(params) {
    const style = params.styleLayer;
    const sprite = params.spriteObject;
    const canvasSize = params.canvasSize || 512;

    // Define data prep and rendering functions
    const getData = makeDataGetter(style);
    const painter = makePaintFunction(style, sprite, canvasSize);

    // Compose into one function
    return function(context, zoom, sources, boundingBoxes) {
      // Quick exits if this layer is not meant to be displayed
      if (style.layout && style.layout["visibility"] === "none") return false;
      if (style.minzoom !== undefined && zoom < style.minzoom) return false;
      if (style.maxzoom !== undefined && zoom > style.maxzoom) return false;

      // Get the data for the layer
      const data = getData(sources);
      if (!data) return false;

      // Save the initial context state, and restore it after rendering
      context.save();
      painter(context, zoom, data, boundingBoxes);
      context.restore();

      return true; // true to indicate canvas has changed
    }
  }

  function addPainters(styleDoc, canvasSize = 512) {
    // Add a painter function to every layer in the style document
    styleDoc.layers.forEach(layer => {
      layer.painter = initPainter({
        canvasSize: canvasSize,
        styleLayer: layer,
        spriteObject: styleDoc.spriteData,
      });
    });

    return styleDoc; // NOTE: Modified in place!
  }

  function initGroups(styleDoc) {
    // Filter to confirm an array element is not equal to the previous element
    const uniq = (x, i, a) => ( !i || x !== a[i-1] );

    const groupNames = styleDoc.layers
      .map( layer => layer["tilekiln-group"] || "none" )
      .filter(uniq);

    // Make sure the groups are in order, not interleaved
    const groupCheck = groupNames.slice().sort().filter(uniq);
    if (groupCheck.length !== groupNames.length) {
      // TODO: assumes we are calling from a Promise chain?
      throw Error("tile-kiln setup: Input layer groups are not in order!");
    }

    // For each group name, collect the layers from the style document, and
    // add a visibility property
    const groups = groupNames.map( name => {
      return {
        name,
        visible: true,
        layers: sortStyleGroup(styleDoc.layers, name),
      };
    });

    return groups;
  }

  function sortStyleGroup(layers, groupName) {
    // Get the layers belonging to this group
    var group = (groupName !== "none")
      ? layers.filter(layer => layer["tilekiln-group"] === groupName)
      : layers.filter(layer => !layer["tilekiln-group"]);

    // Reverse the order of the symbol layers
    var labels = group.filter(layer => layer.type === "symbol").reverse();

    // Append reordered symbol layers to non-symbol layers
    return group.filter(layer => layer.type !== "symbol").concat(labels);
  }

  function addLaminae(tile, groups) {
    tile.laminae = {};

    groups.forEach(group => {
      let img = document.createElement("canvas");
      img.width = img.height = tile.img.width;

      tile.laminae[group.name] = {
        z: tile.z,
        x: tile.x,
        y: tile.y,

        sources: tile.sources,

        img,
        ctx: img.getContext("2d"),
        rendered: false,
      };
    });
  }

  // Wrapper for worker threads to enable a callback interface
  // Inspired by https://codeburst.io/promises-for-the-web-worker-9311b7831733
  function initWorker(codeHref) {

    const tasks = {};
    let globalMsgId = 0;
    let activeTasks = 0;

    const worker = new Worker(codeHref);
    worker.onmessage = handleMsg;

    return {
      startTask,
      cancelTask,
      numActive: () => activeTasks,
      terminate: worker.terminate,
    }

    function startTask(payload, callback) {
      activeTasks ++;
      const msgId = globalMsgId++;
      tasks[msgId] = { callback };
      worker.postMessage({ id: msgId, type: "start", payload });
      return msgId; // Returned ID can be used for later cancellation
    }

    function cancelTask(id) {
      if (tasks[id]) worker.postMessage({ id, type: "cancel" });
      return delete tasks[id];
    }

    function handleMsg(msgEvent) {
      const msg = msgEvent.data; // { id, type, key, payload }
      const task = tasks[msg.id];
      if (!task) return worker.postMessage({ id: msg.id, type: "cancel" });

      switch (msg.type) {
        case "error":
          task.callback(msg.payload);
          break; // Clean up below

        case "header":
          task.header = msg.payload;
          task.result = initJSON(msg.payload);
          return worker.postMessage({ id: msg.id, type: "continue" });

        case "data": 
          let features = task.result[msg.key].features;
          msg.payload.forEach( feature => features.push(feature) );
          return worker.postMessage({ id: msg.id, type: "continue" });

        case "done":
          let err = checkJSON(task.result, task.header)
            ? null
            : "ERROR: JSON from worker failed checks!";
          task.callback(err, task.result);
          break; // Clean up below

        default:
          task.callback("ERROR: worker sent bad message type!");
          break; // Clean up below
      }

      delete tasks[msg.id];
      activeTasks --;
    }
  }

  function initJSON(header) {
    const json = {};
    Object.keys(header).forEach(key => {
      json[key] = { type: "FeatureCollection", features: [] };
    });
    return json;
  }

  function checkJSON(json, header) {
    return Object.keys(header).every(checkFeatureCount);

    function checkFeatureCount(key) {
      return json[key].features.length === header[key];
    }
  }

  function loadImage(href, callback) {
    const errMsg = "ERROR in loadImage for href " + href;
    const img = new Image();

    img.onerror = () => callback(errMsg);

    img.onload = () => (img.complete && img.naturalWidth !== 0)
      ? callback(null, img)
      : callback(errMsg);

    img.crossOrigin = "anonymous";
    img.src = href;

    return img;
  }

  function initTileFactory(size, sources) {
    // Input size is the pixel size of the canvas used for vector rendering
    // Input sources is an OBJECT of TileJSON descriptions of tilesets

    // Initialize a worker thread to read and parse MVT tiles
    const loader = initWorker("./worker.bundle.js");

    // For now we ignore sources that don't have tile endpoints
    const tileSourceKeys = Object.keys(sources).filter( k => {
      return sources[k].tiles && sources[k].tiles.length > 0;
    });

    function orderTile(z, x, y, callback = () => true) {
      let img = document.createElement("canvas");
      img.width = img.height = size;
      const cancelers = [];

      const tile = {
        z, x, y,
        id: z + "/" + x + "/" + y,
        priority: 0,

        sources: {},
        loaded: false,

        img,
        ctx: img.getContext("2d"),
        rendered: false,

        storeCanceler: (canceler) => cancelers.push(canceler),
        cancel,
        canceled: false,
      };

      const loadTasks = {};
      var numToDo = tileSourceKeys.length;
      tileSourceKeys.forEach( loadTile );

      function loadTile(srcKey) {
        var src = sources[srcKey];
        var tileHref = tileURL(src.tiles[0], z, x, y);
        if (src.type === "vector") {
          //readMVT( tileHref, size, (err, data) => checkData(err, srcKey, data) );
          let readCallback = (err, data) => checkData(err, srcKey, data);
          let readPayload = { href: tileHref, size: size };
          loadTasks[srcKey] = loader.startTask(readPayload, readCallback);
        } else if (src.type === "raster") {
          loadImage( tileHref, (err, data) => checkData(err, srcKey, data) );
        }
      }

      function cancel() {
        while (cancelers.length > 0) cancelers.shift()();
        Object.values(loadTasks).forEach(task => loader.cancelTask(task));
        tile.canceled = true;
      }

      function checkData(err, key, data) {
        // If data retrieval errors, don't stop. We could be out of the range of
        // one layer, but we may still be able to render the other layers
        if (err) console.log(err);
        // TODO: maybe stop if all layers have errors?

        tile.sources[key] = data;
        delete loadTasks[key];
        if (--numToDo > 0) return;

        tile.loaded = true;
        return callback(null, tile);
      }
      return tile;
    }

    return orderTile;
  }

  function tileURL(endpoint, z, x, y) {
    return endpoint.replace(/{z}/, z).replace(/{x}/, x).replace(/{y}/, y);
  }

  initZeroTimeouts();

  function initZeroTimeouts() {
    // setTimeout with true zero delay. https://github.com/GlobeletJS/zero-timeout
    const timeouts = [];
    var taskId = 0;

    // Make a unique message, that won't be confused with messages from
    // other scripts or browser tabs
    const messageKey = "zeroTimeout_$" + Math.random().toString(36).slice(2);

    // Make it clear where the messages should be coming from
    const loc = window.location;
    var targetOrigin = loc.protocol + "//" + loc.hostname;
    if (loc.port !== "") targetOrigin += ":" + loc.port;

    // When a message is received, execute a timeout from the list
    window.addEventListener("message", evnt => {
      if (evnt.source != window || evnt.data !== messageKey) return;
      evnt.stopPropagation();

      let task = timeouts.shift();
      if (!task || task.canceled) return;
      task.func(...task.args);
    }, true);

    // Now define the external functions to set or cancel a timeout
    window.setZeroTimeout = function(func, ...args) {
      timeouts.push({ id: taskId++, func, args });
      window.postMessage(messageKey, targetOrigin);
      return taskId;
    };

    window.clearZeroTimeout = function(id) {
      let task = timeouts.find(timeout => timeout.id === id);
      if (task) task.canceled = true;
    };
  }

  function initChunkQueue() {
    const tasks = [];
    var taskId = 0;
    var queueIsRunning = false;

    return {
      enqueueTask,
      cancelTask,
      sortTasks,
    };

    function enqueueTask(newTask) {
      let defaultPriority = () => 0;
      tasks.push({ 
        id: taskId++,
        getPriority: newTask.getPriority || defaultPriority,
        chunks: newTask.chunks,
      });
      if (!queueIsRunning) setZeroTimeout(runTaskQueue);
      return taskId;
    }

    function cancelTask(id) {
      let task = tasks.find(task => task.id === id);
      if (task) task.canceled = true;
    }

    function sortTasks() {
      tasks.sort( (a, b) => compareNums(a.getPriority(), b.getPriority()) );
    }

    function compareNums(a, b) {
      if (a === b) return 0;
      return (a === undefined || a < b) ? -1 : 1;
    }

    function runTaskQueue() {
      // Remove canceled and completed tasks
      while (isDone(tasks[0])) tasks.shift();

      queueIsRunning = (tasks.length > 0);
      if (!queueIsRunning) return;

      // Get the next chunk from the current task, and run it
      let chunk = tasks[0].chunks.shift();
      chunk();

      setZeroTimeout(runTaskQueue);
    }

    function isDone(task) {
      return task && (task.canceled || task.chunks.length < 1);
    }
  }

  function initRenderer(styleGroups) {
    var activeDrawCalls = 0;

    const queue = initChunkQueue();

    const chainDrawCalls = (styleGroups.length === 1)
      ? (tile) => getDrawFuncs(tile, styleGroups[0].layers)
      : (tile) => groupDrawCalls(tile, styleGroups);

    return {
      draw: drawAll,
      activeDrawCalls: () => activeDrawCalls,
      sortTasks: queue.sortTasks,
    };

    function drawAll(tile, callback = () => true, verbose) {
      if (tile.canceled || !tile.loaded) return;
      if (tile.rendered || tile.rendering) return; // Duplicate call?

      // Flag this tile as in the process of rendering
      tile.rendering = true;
      activeDrawCalls ++;

      // Make an array of functions to draw all the layers
      const drawCalls = chainDrawCalls(tile);
      drawCalls.push(finishTile);

      // Submit this array to the task queue
      let renderTaskId = queue.enqueueTask({
        chunks: drawCalls,
        getPriority: () => tile.priority,
      });

      // Tell the tile how to cancel the render task
      tile.storeCanceler(() => queue.cancelTask(renderTaskId));

      function finishTile() {
        tile.rendering = false;
        activeDrawCalls --;
        return callback(null, tile);
      }
    }
  }

  function groupDrawCalls(tile, styleGroups) {
    const drawCalls = styleGroups
      .filter( group => group.visible )
      .flatMap( group => getDrawFuncs(tile.laminae[group.name], group.layers) );

    function composite() {
      tile.ctx.clearRect(0, 0, tile.img.width, tile.img.height);
      styleGroups.forEach( group => {
        if (!group.visible) return;
        tile.ctx.drawImage(tile.laminae[group.name].img, 0, 0);
      });
      tile.rendered = true;
    }

    drawCalls.push(composite);
    return drawCalls;
  }


  function getDrawFuncs(tile, layers) {
    if (tile.rendered) return [() => true];

    tile.ctx.clearRect(0, 0, tile.img.width, tile.img.height);
    const boundingBoxes = [];

    // Create an array of painter calls, one for each layer.
    const drawCalls = layers.map(layer => {
      return () => layer.painter(tile.ctx, tile.z, tile.sources, boundingBoxes);
    });

    // Add a function to update the rendered flag
    drawCalls.push(() => { tile.rendered = true; });
    return drawCalls;
  }

  function init(params) {
    // Process parameters, substituting defaults as needed
    var canvSize = params.size || 512;
    var styleURL = params.style;   // REQUIRED
    var mbToken  = params.token;   // May be undefined
    var callback = params.callback || ( () => undefined );

    // Declare some variables & methods that will be defined inside a callback
    var tileFactory, renderer;
    var styleGroups = [];

    function setGroupVisibility(name, visibility) {
      var group = styleGroups.find(group => group.name === name);
      if (group) group.visible = visibility;
    }

    const api = { // Initialize properties, update when styles load
      create: () => undefined,
      hideGroup: (name) => setGroupVisibility(name, false),
      showGroup: (name) => setGroupVisibility(name, true),
      redraw: () => undefined,
      activeDrawCalls: () => 0,
      sortTasks: () => undefined,

      ready: false,
    };

    // Get the style info
    parseStyle(styleURL, mbToken)
      .then( style => addPainters(style, canvSize) )
      .then( setup )
      .catch(err => callback(err));

    return api;

    function setup(styleDoc) {
      styleGroups = initGroups(styleDoc);

      tileFactory = initTileFactory(canvSize, styleDoc.sources);
      renderer = initRenderer(styleGroups);

      // Update api
      api.style = styleDoc; // WARNING: directly modifiable from calling program
      api.create = create;

      api.redraw = renderer.draw;
      api.activeDrawCalls = renderer.activeDrawCalls;
      api.sortTasks = renderer.sortTasks;

      api.ready = true;

      return callback(null, api);
    }

    function create(z, x, y, cb = () => undefined, reportTime) {
      let t0 = performance.now();

      var tile = tileFactory(z, x, y, render);

      function render(err) {
        if (err) return cb(err);

        if (styleGroups.length > 1) addLaminae(tile, styleGroups);

        var wrapCb = cb;
        if (reportTime) {
          let t1 = performance.now();
          cb("Calling drawAll");
          // Wrap the callback to add time reporting
          wrapCb = (msg, data) => {
            let t2 = performance.now();
            return cb(null, data, t2 - t1, t1 - t0);
          };
        }
        renderer.draw(tile, wrapCb, reportTime);
      }

      return tile;
    }
  }

  const tzxy = [6, 16, 25]; // This tile takes 240-250ms with version #e5da070f...

  function main() {
    // Initialize the display canvas and rendering context
    const display = initDisplay('map');

    // Get a link to the tile coordinates printout
    var title = document.getElementById("zxy");
    var burwellVisible = true;
    var labelsVisible = true;
    var currentTile, nextTile;

    // Get a link to the feature info printout
    var info = document.getElementById("info");

    // Initialize tile factory
    const tileMaker = init({
      size: 512,
      style: "./macrostrat-onepass.json", //"./macrostrat-grouped.json",
      token: "pk.eyJ1IjoiamhlbWJkIiwiYSI6ImNqcHpueHpyZjBlMjAzeG9kNG9oNzI2NTYifQ.K7fqhk2Z2YZ8NIV94M-5nA",
      callback: setup,
    });

    // Declare time tracking variables
    var clickTime, displayTime, dt, requestActive;
    var framesSinceRedraw = 999;

    // Get first tile, setup interaction
    function setup(err, api) {
      if (err) return console.log(err);
      initHandlers();
      update();
      requestAnimationFrame(checkRender);
    }

    function checkRender(time) {
      if (currentTile) {
        display.context.clearRect(0, 0, 512, 512);
        display.context.drawImage(currentTile.img, 0, 0);
      }
      if (requestActive) {
        dt = (time - clickTime).toFixed(1);
        info.innerHTML += "<br>Animation frame: " + dt + "ms";
      } else if (framesSinceRedraw < 3) {
        dt = (time - clickTime).toFixed(1);
        info.innerHTML += "<br>Animation frame: " + dt + "ms";
        framesSinceRedraw++;
      }

      requestAnimationFrame(checkRender);
    }

    function update() {
      // Clear printout, start timer
      info.innerHTML = "";
      clickTime = performance.now();
      requestActive = true;
      var checkTime = true;
      nextTile = tileMaker.create(tzxy[0], tzxy[1], tzxy[2], displayTile, checkTime);
    }
    function displayTile(err, tile, renderTime, prepTime) {
      if (err) {
        info.innerHTML += "<br>" + err;
        return;
        //return console.log(err);
      }
      currentTile = nextTile;
      // Copy the renderer canvas onto our display canvas
      //display.context.drawImage(tile.img, 0, 0); // Move to animation loop
      title.innerHTML = "z/x/y = " + tzxy[0] + "/" + tzxy[1] + "/" + tzxy[2];
      info.innerHTML += "<br>Prep time: " + Math.round(prepTime) + "ms";
      info.innerHTML += "<br>Render time: " + Math.round(renderTime) + "ms";
      displayTime = Math.round(performance.now() - clickTime);
      info.innerHTML += "<br>Total delay: " + displayTime + "ms";
      requestActive = false;
      framesSinceRedraw = 0;
    }

    function toggleBurwell() {
      burwellVisible = !burwellVisible;
      if (burwellVisible) {
        tileMaker.showGroup("burwell");
      } else {
        tileMaker.hideGroup("burwell");
      }
      currentTile.rendered = false;
      clickTime = performance.now();
      requestActive = true;
      tileMaker.redraw(currentTile, displayTile, true);
    }

    function toggleLabels() {
      labelsVisible = !labelsVisible;
      if (labelsVisible) {
        tileMaker.showGroup("labels");
      } else {
        tileMaker.hideGroup("labels");
      }
      currentTile.rendered = false;
      clickTime = performance.now();
      requestActive = true;
      tileMaker.redraw(currentTile, displayTile, true);
    }

    function initHandlers() {
      const burwellToggle = document.getElementById("toggleBurwell");
      burwellToggle.addEventListener("click", toggleBurwell, false);

      const labelToggle = document.getElementById("toggleLabels");
      labelToggle.addEventListener("click", toggleLabels, false);

      const left = document.getElementById("left");
      const right = document.getElementById("right");
      const up = document.getElementById("up");
      const down = document.getElementById("down");
      const zoomIn = document.getElementById("zoomIn");
      const zoomOut = document.getElementById("zoomOut");

      left.addEventListener("click", function(click) {
        tzxy[1]--;
        update();
      }, false);
      right.addEventListener("click", function(click) {
        tzxy[1]++;
        update();
      }, false);
      up.addEventListener("click", function(click) {
        tzxy[2]--;
        update();
      }, false);
      down.addEventListener("click", function(click) {
        tzxy[2]++;
        update();
      }, false);
      zoomIn.addEventListener("click", function(click) {
        tzxy[0]++;
        tzxy[1] *= 2;
        tzxy[2] *= 2;
        update();
      }, false);
      zoomOut.addEventListener("click", function(click) {
        tzxy[0]--;
        tzxy[1] = Math.floor(tzxy[1] / 2);
        tzxy[2] = Math.floor(tzxy[2] / 2);
        update();
      }, false);
    }
  }

  exports.main = main;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
